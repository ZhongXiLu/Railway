{
	"csm": {
		"nodes": {
			"12": {
				"typename": {
					"type": "string",
					"value": "StationIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1393,
						140
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"13": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/station.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 70
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/station_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/station.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"40": {
								"textContent": {
									"type": "string",
									"value": "End1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										32,
										11
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										21.5,
										13.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"131": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										74
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": [
							{
								"src": "13",
								"dest": "110"
							},
							{
								"src": "110",
								"dest": "40"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Station/12.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StationIcon"
			},
			"13": {
				"typename": {
					"type": "string",
					"value": "StationIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1398,
						290
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"13": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/station.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 70
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/station_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/station.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"40": {
								"textContent": {
									"type": "string",
									"value": "End2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										32,
										11
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										21.5,
										13.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"131": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										74
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": [
							{
								"src": "13",
								"dest": "110"
							},
							{
								"src": "110",
								"dest": "40"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Station/13.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StationIcon"
			},
			"27": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						853,
						176
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/27.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"30": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						666,
						178
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/30.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"31": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						602,
						217.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/31.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/30.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/31.instance": "M654,232.00000000000003L602,217.50000000000003",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/31.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/27.instance": "M602.0746874970234,217.49403537350165L941.9990631510417,209.00007481779878"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"32": {
				"typename": {
					"type": "string",
					"value": "TurnoutIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						852,
						256
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"42": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/turnout1.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr(\"outDirection\") == \"STRAIGHT\") {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/turnout1_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/turnout1.png'})\n}\n} else {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/turnout2_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/turnout2.png'})\n}\n}\n"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										1,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"125": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										94
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Turnout/32.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon"
			},
			"35": {
				"typename": {
					"type": "string",
					"value": "JunctionIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						668,
						250
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"44": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/junction1.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr(\"inDirection\") == \"STRAIGHT\") {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/junction1_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/junction1.png'})\n}\n} else {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/junction2_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/junction2.png'})\n}\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"129": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										104
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Junction/35.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/JunctionIcon"
			},
			"36": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						797,
						348.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/36.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/35.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/36.instance": "M702,419L797,348.5",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/36.instance--/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/32.instance": "M797.1205580005387,348.4105332732844L885.9995908661547,288.0003036203799"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"40": {
				"typename": {
					"type": "string",
					"value": "StationIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						126,
						142
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"13": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/station.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 70
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/station_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/station.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"40": {
								"textContent": {
									"type": "string",
									"value": "Start1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										32,
										11
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										21.5,
										13.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"131": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										74
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": [
							{
								"src": "13",
								"dest": "110"
							},
							{
								"src": "110",
								"dest": "40"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Station/40.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StationIcon"
			},
			"43": {
				"typename": {
					"type": "string",
					"value": "StationIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						128,
						294
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"13": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/station.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 70
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/station_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/station.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"40": {
								"textContent": {
									"type": "string",
									"value": "Start2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										32,
										11
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										21.5,
										13.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"131": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										74
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": [
							{
								"src": "13",
								"dest": "110"
							},
							{
								"src": "110",
								"dest": "40"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Station/43.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StationIcon"
			},
			"50": {
				"typename": {
					"type": "string",
					"value": "ScheduleIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						118,
						574
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"1": {
								"width": {
									"type": "double",
									"value": 600
								},
								"height": {
									"type": "double",
									"value": 200
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										8
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"3": {
								"textContent": {
									"type": "string",
									"value": "Schedule: T1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:\"Schedule: \" + getAttr(\"train\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										10,
										212
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/Schedule/50.instance"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/ScheduleIcon"
			},
			"52": {
				"typename": {
					"type": "string",
					"value": "TrainIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						133,
						816
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"25": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/train.png"
								},
								"width": {
									"type": "double",
									"value": 60
								},
								"height": {
									"type": "double",
									"value": 25
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										1,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"34": {
								"textContent": {
									"type": "string",
									"value": "T1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Train/52.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrainIcon"
			},
			"53": {
				"typename": {
					"type": "string",
					"value": "TrainIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						774,
						814
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"25": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/train.png"
								},
								"width": {
									"type": "double",
									"value": 60
								},
								"height": {
									"type": "double",
									"value": 25
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										1,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"34": {
								"textContent": {
									"type": "string",
									"value": "T2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Train/53.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrainIcon"
			},
			"54": {
				"typename": {
					"type": "string",
					"value": "StartIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						162,
						650
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"10": {
								"width": {
									"type": "double",
									"value": 150
								},
								"height": {
									"type": "double",
									"value": 50
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#00b050",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"13": {
								"textContent": {
									"type": "string",
									"value": "Start1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"station\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"14": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										28,
										19
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "10",
								"dest": "14"
							},
							{
								"src": "14",
								"dest": "13"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/Start/54.instance"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StartIcon"
			},
			"56": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "StepInScheduleLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						182.1145832596558,
						628.596874937709
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;57.46730468627496,76.36495493663533%",
										"0;43.347989168709205,64.56309826460975%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;40.21300087904992"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule/56.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/ScheduleIcon/50.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/56.instance": "M127,582L182.1145832596558,628.596874937709",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/56.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StartIcon/54.instance": "M182.114264973231,628.5966058410044L236.99936401534637,674.9994623038837"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink"
			},
			"58": {
				"typename": {
					"type": "string",
					"value": "EndIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						512,
						648
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"16": {
								"width": {
									"type": "double",
									"value": 150
								},
								"height": {
									"type": "double",
									"value": 50
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#e74170",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"17": {
								"textContent": {
									"type": "string",
									"value": "End1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"station\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"18": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										28,
										19
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "16",
								"dest": "18"
							},
							{
								"src": "18",
								"dest": "17"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/End/58.instance"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/EndIcon"
			},
			"59": {
				"typename": {
					"type": "string",
					"value": "JunctionIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						671,
						411
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"44": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/junction1.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr(\"inDirection\") == \"STRAIGHT\") {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/junction1_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/junction1.png'})\n}\n} else {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/junction2_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/junction2.png'})\n}\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"129": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										104
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Junction/59.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/JunctionIcon"
			},
			"64": {
				"typename": {
					"type": "string",
					"value": "StationIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						131,
						455
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"13": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/station.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 70
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/station_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/station.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"40": {
								"textContent": {
									"type": "string",
									"value": "Start3"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										32,
										11
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										21.5,
										13.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"131": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										74
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": [
							{
								"src": "13",
								"dest": "110"
							},
							{
								"src": "110",
								"dest": "40"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Station/64.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StationIcon"
			},
			"66": {
				"typename": {
					"type": "string",
					"value": "TurnoutIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						862,
						410
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"42": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/turnout1.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr(\"outDirection\") == \"STRAIGHT\") {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/turnout1_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/turnout1.png'})\n}\n} else {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/turnout2_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/turnout2.png'})\n}\n}\n"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										1,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"125": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										94
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Turnout/66.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon"
			},
			"68": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						853,
						435
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/68.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/59.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/68.instance": "M826,435L853,435",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/68.instance--/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/66.instance": "M853.0775470750423,435L857.9994451303155,440"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"69": {
				"typename": {
					"type": "string",
					"value": "StationIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1399,
						449
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"13": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/station.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 70
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/station_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/station.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"40": {
								"textContent": {
									"type": "string",
									"value": "End3"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										32,
										11
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										21.5,
										13.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"131": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										74
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": [
							{
								"src": "13",
								"dest": "110"
							},
							{
								"src": "110",
								"dest": "40"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Station/69.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StationIcon"
			},
			"73": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "StepInScheduleLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						357,
						627.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;230.7756937603241,98.09886439608445%",
										"0;41.57593329260942,19.406514478355845%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;11.190117133169345"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule/73.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/ScheduleIcon/50.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/73.instance": "M127,582L357,627.5",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/73.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/EndIcon/58.instance": "M357.07352892722326,627.5145459399506L586.9994331811898,672.9998878684528"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink"
			},
			"74": {
				"typename": {
					"type": "string",
					"value": "WaypointIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						355,
						648
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"21": {
								"width": {
									"type": "double",
									"value": 120
								},
								"height": {
									"type": "double",
									"value": 50
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"22": {
								"textContent": {
									"type": "string",
									"value": "STRAIGHT"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"direction\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"23": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										28,
										19
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "21",
								"dest": "23"
							},
							{
								"src": "23",
								"dest": "22"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/Waypoint/74.instance"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon"
			},
			"75": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "StepInScheduleLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						271,
						627.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;145.20430724587334,95.3532613523753%",
										"0;41.685600328234045,30.12898188564645%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;17.535089108017658"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule/75.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/ScheduleIcon/50.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/75.instance": "M127,582L271,627.5",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/75.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon/74.instance": "M271.0712389781635,627.5225095382391L414.9991479704475,672.999730782329"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink"
			},
			"76": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "NextStepLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						325.1499995918367,
						682.9871428921283
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;34.507967679512205,99.63466490417511%",
										"0;-6.9724927885868055,-8.540114134643472%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-4.899092453787704"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/NextStep/76.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StartIcon/54.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/76.instance": "M290,686L325.1499995918367,682.9871428921283",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/76.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon/74.instance": "M325.0747856637014,682.9935898002542L359.9995718367347,680.0000366997085"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink"
			},
			"77": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "NextStepLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						495,
						684
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;22.82559987416124,99.90561583550596%",
										"0;-4.996196319127421,-4.343722427630693%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-2.489552921999156"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/NextStep/77.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon/74.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/77.instance": "M472,685L495,684",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/77.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/EndIcon/58.instance": "M495.0746737964304,683.9967533131985L517.9993487712665,683.0000283142928"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink"
			},
			"78": {
				"typename": {
					"type": "string",
					"value": "ScheduleIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						752,
						570
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1.1407916666666666,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"1": {
								"width": {
									"type": "double",
									"value": 600
								},
								"height": {
									"type": "double",
									"value": 200
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										8
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"3": {
								"textContent": {
									"type": "string",
									"value": "Schedule: T2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:\"Schedule: \" + getAttr(\"train\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										10,
										212
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/Schedule/78.instance"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/ScheduleIcon"
			},
			"79": {
				"typename": {
					"type": "string",
					"value": "EndIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1295,
						639
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"16": {
								"width": {
									"type": "double",
									"value": 150
								},
								"height": {
									"type": "double",
									"value": 50
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#e74170",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"17": {
								"textContent": {
									"type": "string",
									"value": "End2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"station\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"18": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										28,
										19
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "16",
								"dest": "18"
							},
							{
								"src": "18",
								"dest": "17"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/End/79.instance"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/EndIcon"
			},
			"80": {
				"typename": {
					"type": "string",
					"value": "StartIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						796,
						646
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"10": {
								"width": {
									"type": "double",
									"value": 150
								},
								"height": {
									"type": "double",
									"value": 50
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#00b050",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"13": {
								"textContent": {
									"type": "string",
									"value": "Start2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"station\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"14": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										28,
										19
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "10",
								"dest": "14"
							},
							{
								"src": "14",
								"dest": "13"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/Start/80.instance"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StartIcon"
			},
			"81": {
				"typename": {
					"type": "string",
					"value": "WaypointIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						989,
						644
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"21": {
								"width": {
									"type": "double",
									"value": 120
								},
								"height": {
									"type": "double",
									"value": 50
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"22": {
								"textContent": {
									"type": "string",
									"value": "TURN"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"direction\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"23": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										28,
										19
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "21",
								"dest": "23"
							},
							{
								"src": "23",
								"dest": "22"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/Waypoint/81.instance"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon"
			},
			"83": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "NextStepLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						959.1499995918367,
						678.9871428921283
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;34.50796767951226,99.63466490417511%",
										"0;-6.9724927885868055,-8.540114134643487%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-4.899092453787712"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/NextStep/83.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StartIcon/80.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/83.instance": "M924,682L959.1499995918368,678.9871428921283",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/83.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon/81.instance": "M959.0747856637015,678.9935898002542L993.9995718367347,676.0000366997085"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink"
			},
			"84": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "StepInScheduleLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						905,
						623.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;145.20430724587357,95.35326135237531%",
										"0;41.685600328234045,30.12898188564642%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;17.53508910801764"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule/84.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/ScheduleIcon/78.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/84.instance": "M761,578L905,623.5",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/84.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon/81.instance": "M905.0712389781635,623.5225095382391L1048.9991479704477,668.999730782329"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink"
			},
			"85": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "StepInScheduleLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						991,
						623.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;379.4244534914088,99.4338905250035%",
										"0;36.52253224745266,10.625507755473123%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;6.0994817602245615"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule/85.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/ScheduleIcon/78.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/85.instance": "M761,578L991,623.5",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/85.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/EndIcon/79.instance": "M991.0735289272233,623.5145459399506L1369.99943318119,663.9998878684528"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink"
			},
			"86": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "StepInScheduleLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						816.1145832596558,
						624.596874937709
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;57.46730468627504,76.36495493663536%",
										"0;43.347989168709205,64.56309826460972%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;40.21300087904991"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule/86.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/ScheduleIcon/78.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/86.instance": "M761,578L816.1145832596558,624.596874937709",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/86.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StartIcon/80.instance": "M816.114264973231,624.5966058410044L870.9993640153464,670.9994623038837"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink"
			},
			"87": {
				"typename": {
					"type": "string",
					"value": "WaypointIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1148,
						647
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"21": {
								"width": {
									"type": "double",
									"value": 120
								},
								"height": {
									"type": "double",
									"value": 50
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"22": {
								"textContent": {
									"type": "string",
									"value": "STRAIGHT"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"direction\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"23": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										28,
										19
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "21",
								"dest": "23"
							},
							{
								"src": "23",
								"dest": "22"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/Waypoint/87.instance"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon"
			},
			"88": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "StepInScheduleLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						985.1335624999999,
						625
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;223.69125623181833,97.84782565116184%",
										"0;43.0859644339514,20.634994919791865%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;11.908535212112385"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule/88.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/ScheduleIcon/78.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/88.instance": "M762.267125,578L985.1335624999999,625",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/88.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon/87.instance": "M985.2068411772498,625.0154536406171L1207.9994189350266,671.9998774599978"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink"
			},
			"89": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "NextStepLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1131.5,
						669
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;27.49945520661163,100%",
										"0;-4,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/NextStep/89.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon/81.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/89.instance": "M1104,669L1131.5,669",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/89.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon/87.instance": "M1131.5774999088123,669L1158.9994552066116,669"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink"
			},
			"90": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "NextStepLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1282.149999314129,
						679.0277776507646
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;27.577802856915696,98.328200498446%",
										"0;1.0389915756522896,18.208926018230862%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;10.491477012331668"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/NextStep/90.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon/87.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/90.instance": "M1255,674L1282.149999314129,679.0277776507646",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/90.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/EndIcon/79.instance": "M1282.0747221374372,679.0138374328588L1308.9994451303155,683.9998972463547"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink"
			},
			"91": {
				"typename": {
					"type": "string",
					"value": "ScheduleIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						106,
						847
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"1": {
								"width": {
									"type": "double",
									"value": 600
								},
								"height": {
									"type": "double",
									"value": 200
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										8
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"3": {
								"textContent": {
									"type": "string",
									"value": "Schedule: T3"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:\"Schedule: \" + getAttr(\"train\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										10,
										212
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/Schedule/91.instance"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/ScheduleIcon"
			},
			"92": {
				"typename": {
					"type": "string",
					"value": "StartIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						150,
						923
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"10": {
								"width": {
									"type": "double",
									"value": 150
								},
								"height": {
									"type": "double",
									"value": 50
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#00b050",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"13": {
								"textContent": {
									"type": "string",
									"value": "Start3"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"station\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"14": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										28,
										19
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "10",
								"dest": "14"
							},
							{
								"src": "14",
								"dest": "13"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/Start/92.instance"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StartIcon"
			},
			"93": {
				"typename": {
					"type": "string",
					"value": "EndIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						500,
						921
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"16": {
								"width": {
									"type": "double",
									"value": 150
								},
								"height": {
									"type": "double",
									"value": 50
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#e74170",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"17": {
								"textContent": {
									"type": "string",
									"value": "End3"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"station\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"18": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										28,
										19
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "16",
								"dest": "18"
							},
							{
								"src": "18",
								"dest": "17"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/End/93.instance"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/EndIcon"
			},
			"94": {
				"typename": {
					"type": "string",
					"value": "WaypointIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						343,
						921
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"21": {
								"width": {
									"type": "double",
									"value": 120
								},
								"height": {
									"type": "double",
									"value": 50
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"22": {
								"textContent": {
									"type": "string",
									"value": "TURN"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"direction\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"23": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										28,
										19
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "21",
								"dest": "23"
							},
							{
								"src": "23",
								"dest": "22"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/Waypoint/94.instance"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon"
			},
			"95": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "NextStepLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						483,
						957
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;22.82559987416124,99.90561583550596%",
										"0;-4.996196319127421,-4.343722427630693%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-2.489552921999156"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/NextStep/95.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon/94.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/95.instance": "M460,958L483,957",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/95.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/EndIcon/93.instance": "M483.0746737964304,956.9967533131985L505.99934877126645,956.0000283142928"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink"
			},
			"96": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "NextStepLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						313.1499995918367,
						955.9871428921283
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;34.50796767951226,99.63466490417511%",
										"0;-6.9724927885868055,-8.540114134643458%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-4.899092453787696"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/NextStep/96.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StartIcon/92.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/96.instance": "M278,959L313.1499995918367,955.9871428921283",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink/96.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon/94.instance": "M313.0747856637014,955.9935898002542L347.99957183673473,953.0000366997085"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/NextStepLink"
			},
			"97": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "StepInScheduleLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						259,
						900.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;145.2043072458734,95.3532613523753%",
										"0;41.685600328234045,30.128981885646443%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;17.535089108017655"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule/97.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/ScheduleIcon/91.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/97.instance": "M115,855L259,900.5",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/97.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/WaypointIcon/94.instance": "M259.0712389781635,900.5225095382391L402.99914797044755,945.999730782329"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink"
			},
			"98": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "StepInScheduleLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						345,
						900.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;230.7756937603242,98.09886439608445%",
										"0;41.57593329260942,19.406514478355835%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;11.190117133169338"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule/98.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/ScheduleIcon/91.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/98.instance": "M115,855L345,900.5",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/98.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/EndIcon/93.instance": "M345.07352892722326,900.5145459399506L574.9994331811899,945.9998878684528"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink"
			},
			"99": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "StepInScheduleLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						170.1145832596558,
						901.596874937709
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;57.46730468627496,76.36495493663533%",
										"0;43.347989168709205,64.56309826460975%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;40.21300087904992"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule/99.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/ScheduleIcon/91.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/99.instance": "M115,855L170.1145832596558,901.596874937709",
						"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink/99.instance--/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StartIcon/92.instance": "M170.114264973231,901.5966058410044L224.99936401534637,947.9994623038837"
					}
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule.defaultIcons/StepInScheduleLink"
			},
			"100": {
				"typename": {
					"type": "string",
					"value": "TrainIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						121,
						1087
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"25": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/train.png"
								},
								"width": {
									"type": "double",
									"value": 60
								},
								"height": {
									"type": "double",
									"value": 25
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										1,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"34": {
								"textContent": {
									"type": "string",
									"value": "T3"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Train/100.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrainIcon"
			},
			"101": {
				"typename": {
					"type": "string",
					"value": "ClockIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						758,
						879
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"69": {
								"width": {
									"type": "double",
									"value": 120
								},
								"height": {
									"type": "double",
									"value": 50
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"72": {
								"textContent": {
									"type": "string",
									"value": "Step: 1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "22px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:\"Step: \" + getAttr(\"step\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										11,
										19
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"73": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										12,
										18.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "69",
								"dest": "73"
							},
							{
								"src": "73",
								"dest": "72"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Clock/101.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/ClockIcon"
			},
			"102": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						486,
						178
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/102.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"103": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						654.5,
						210
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/103.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/102.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/103.instance": "M569,218L654.5,210",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/103.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/30.instance": "M654.6496490548888,209.98599774925015L739.9992987927909,202.00006561003124"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"104": {
				"typename": {
					"type": "string",
					"value": "TurnoutIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						307,
						178
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"42": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/turnout1.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr(\"outDirection\") == \"STRAIGHT\") {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/turnout1_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/turnout1.png'})\n}\n} else {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/turnout2_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/turnout2.png'})\n}\n}\n"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										1,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"125": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										94
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Turnout/104.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon"
			},
			"105": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						569.5,
						282.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/105.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/104.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/105.instance": "M555,365L569.5,282.5",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/105.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/102.instance": "M569.5267501269777,282.3523789289008L582.999858026443,208.00078348370337"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"106": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						336,
						178.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/106.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StationIcon/40.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/106.instance": "M245,162L336,178.5",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/106.instance--/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/104.instance": "M336.1480469646329,178.52684368040048L425.9993553823868,202.99988311878442"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"107": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488,
						250
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/107.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"108": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						689,
						285.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/108.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/107.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/108.instance": "M643,303L689,285.5",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/108.instance--/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/35.instance": "M689.0702644488484,285.4732689596772L734.9997128152385,268.0001092550723"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"109": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						510,
						236
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/109.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/104.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/109.instance": "M438,206L510,236",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/109.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/107.instance": "M510.1319693780772,236.0706314981258L580.9993431623702,273.99964845309955"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"110": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488,
						330
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/110.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"111": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						696.6441176175076,
						315.957647067508
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/111.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/110.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/111.instance": "M574,352L696.6441176175076,315.957647067508",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/111.instance--/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/35.instance": "M696.643891550749,315.9577135034533L818.9995481026151,280.0001328024968"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"112": {
				"typename": {
					"type": "string",
					"value": "TurnoutIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						311,
						331
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"42": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/turnout1.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr(\"outDirection\") == \"STRAIGHT\") {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/turnout1_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/turnout1.png'})\n}\n} else {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/turnout2_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/turnout2.png'})\n}\n}\n"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										1,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"125": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										94
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Turnout/112.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon"
			},
			"113": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						523,
						374
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/113.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/112.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/113.instance": "M463,391L523,374",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/113.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/110.instance": "M523.144692903433,373.95900367736067L582.999064482562,357.0002650632742"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"114": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						288,
						339
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/114.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StationIcon/43.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/114.instance": "M228,318L288,339",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/114.instance--/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/112.instance": "M288.1412857665097,339.0494500182783L347.99910813553913,359.9996878474387"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"115": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						491,
						411
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/115.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"116": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						670.1499998347108,
						439.4822727468069
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/116.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/115.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/116.instance": "M615,446L670.1499998347108,439.4822727468069",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/116.instance--/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/59.instance": "M670.074863615815,439.4911524817673L724.9997274380164,433.00003221187075"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"117": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						510.62577633281825,
						392.0819875354667
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/117.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/112.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/117.instance": "M443,348L510.62577633281825,392.0819875354667",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/117.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/115.instance": "M510.62546384535517,392.08178383993516L577.9993755416901,435.99959294569425"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"118": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						491,
						491
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/118.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"119": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						311,
						491
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/119.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"120": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						652,
						507
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/120.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/118.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/120.instance": "M603,517L652,507",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/120.instance--/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/59.instance": "M652.0733529756466,506.98503000497004L700.999706196,497.00005996000004"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"121": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						529.5,
						522
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/121.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/119.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/121.instance": "M482,532L529.5,522",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/121.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/118.instance": "M529.5733021316469,521.9845679722848L576.9996973067025,512.0000637249047"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"122": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						312,
						495
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/122.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StationIcon/64.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/122.instance": "M222,470L312,495",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/122.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/119.instance": "M312.1448490599195,495.04023584997765L401.99937609792664,519.9998266938685"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"123": {
				"typename": {
					"type": "string",
					"value": "JunctionIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1213,
						176
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"44": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/junction1.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr(\"inDirection\") == \"STRAIGHT\") {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/junction1_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/junction1.png'})\n}\n} else {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/junction2_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/junction2.png'})\n}\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"129": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										104
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Junction/123.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/JunctionIcon"
			},
			"124": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1420.1459457880085,
						184.96486490288683
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/124.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/123.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/124.instance": "M1366,198L1420.1459457880087,184.96486490288683",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/124.instance--/Formalisms/Railway/Railway.defaultIcons/StationIcon/12.instance": "M1420.0728414705031,184.9824640904344L1473.999737192269,172.00006326852784"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"125": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1033,
						176
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/125.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"126": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1196.6499999228427,
						192.51397514809094
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/126.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/125.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/126.instance": "M1116,185L1196.6499999228427,192.51397514809094",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/126.instance--/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/123.instance": "M1196.6496272526088,192.51394042726167L1276.999255275645,199.99993061574335"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"127": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1030.1499999274206,
						203.99638554391757
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/127.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/27.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/127.instance": "M947,206L1030.1499999274206,203.99638554391757",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/127.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/125.instance": "M1030.1496384821608,203.9963942534419L1112.9992776890695,202.00001740508264"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"128": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1033,
						256
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/128.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"129": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1190.6420210622887,
						286.4473405049941
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/129.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/128.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/129.instance": "M1146,303L1190.6420210622887,286.4473405049941",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/129.instance--/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/123.instance": "M1190.5708595252158,286.4737262434594L1234.9996980413782,270.00011196218566"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"130": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1064.6488635224491,
						278.0204545298021
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/130.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/32.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/130.instance": "M993,279L1064.6488635224491,278.0204545298021",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/130.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/128.instance": "M1064.648412421553,278.0203925464729L1129.9990987074602,286.999876158277"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"131": {
				"typename": {
					"type": "string",
					"value": "JunctionIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1218,
						326
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"44": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/junction1.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr(\"inDirection\") == \"STRAIGHT\") {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/junction1_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/junction1.png'})\n}\n} else {\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/junction2_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/junction2.png'})\n}\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"129": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										104
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Junction/131.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/JunctionIcon"
			},
			"132": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1429.143478116216,
						335.95565221862415
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/132.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/131.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/132.instance": "M1374,353L1429.143478116216,335.95565221862415",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/132.instance--/Formalisms/Railway/Railway.defaultIcons/StationIcon/13.instance": "M1429.0716143487423,335.97786465584335L1483.9997506172435,319.00007708194295"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"133": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1038,
						326
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/133.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"134": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1242.5,
						354
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/134.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/133.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/134.instance": "M1201,356L1242.5,354",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/134.instance--/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/131.instance": "M1242.5748192410806,353.9963942534419L1283.9996388445347,352.00001740508264"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"135": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1054,
						314.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/135.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/32.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/135.instance": "M968,286L1054,314.5",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/135.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/133.instance": "M1054.1352867376652,314.5651067425014L1133.9993876109443,352.999705287767"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"136": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1038,
						406
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/136.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"137": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1196.1454543475775,
						428.95757581528994
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/137.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/136.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/137.instance": "M1148,443L1196.1454543475775,428.95757581528994",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/137.instance--/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/131.instance": "M1196.072580324359,428.97883073872873L1243.9997063503106,415.00008564782604"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"138": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1041.5,
						427
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/138.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/66.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/138.instance": "M972,425L1041.5,427",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/138.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/136.instance": "M1041.5748648446838,427.00404674836125L1096.9997298920543,429.9999853995705"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"139": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1219,
						485
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/139.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"140": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1373.6493420669585,
						495.98421053036566
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/140.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/139.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/140.instance": "M1260,508L1373.6493420669585,495.98421053036566",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/140.instance--/Formalisms/Railway/Railway.defaultIcons/StationIcon/69.instance": "M1373.6490800634665,495.9842382311755L1486.99947629905,484.00005536926346"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"141": {
				"typename": {
					"type": "string",
					"value": "StraightIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1039,
						485
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({position:getAttr(\"position\")})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"src": {
									"type": "string",
									"value": "/Formalisms/Railway/Icons/straight.png"
								},
								"width": {
									"type": "double",
									"value": 180
								},
								"height": {
									"type": "double",
									"value": 40
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)\nif(getAttr('highlight')) {\n\t({'src':'/Formalisms/Railway/Icons/straight_m.png'})\n} else {\n\t({'src':'/Formalisms/Railway/Icons/straight.png'})\n}"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n(\n{\n    width:getAttr(\"width\"),\n    height:getAttr(\"height\")   \n}\n)"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ff0000",
										"stroke-dasharray": "",
										"fill": "#ff0000",
										"fill-opacity": 1,
										"font-size": "16px",
										"font-family": "Calibri",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none",
										"font-style": "italic"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({textContent:getAttr(\"comment\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										48
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/Straight/141.instance"
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/StraightIcon"
			},
			"142": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1248.5,
						523
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/142.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/141.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/142.instance": "M1182,522L1248.5,523",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/142.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/139.instance": "M1248.6495487601328,523.0022488535358L1314.9990986488779,523.9999864458478"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"143": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0.2,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TrackToTrackLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1064.12972967919,
						478.07621618652405
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/Railway/Railway/TrackToTrack/143.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/66.instance--/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/143.instance": "M970,430L1064.12972967919,478.07621618652405",
						"/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink/143.instance--/Formalisms/Railway/Railway.defaultIcons/StraightIcon/141.instance": "M1064.129449182804,478.07605139489726L1126.9994394108937,518.9996706539"
					}
				},
				"$type": "/Formalisms/Railway/Railway.defaultIcons/TrackToTrackLink"
			},
			"144": {
				"typename": {
					"type": "string",
					"value": "SimulationIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"65": {
								"width": {
									"type": "double",
									"value": 200
								},
								"height": {
									"type": "double",
									"value": 50
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#2BAFD4",
										"fill-opacity": 0.5,
										"font-size": "20px",
										"stroke-width": 3,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"69": {
								"textContent": {
									"type": "string",
									"value": "5000"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\nvar splitted = getAttr('end_condition').split('\\n'),\n    textContent = \"\";\nif (splitted.length > 1) {\n    textContent = \"...\\n\" + splitted[splitted.length - 1];\n} else if (splitted.length == 1) {\n    textContent = splitted[0];\n}\n({'textContent': textContent})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										13,
										13
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"72": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										21.31768296950213,
										13.063635584495046
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "65",
								"dest": "72"
							},
							{
								"src": "72",
								"dest": "69"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/Simulation/144.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/SimulationIcon"
			},
			"145": {
				"typename": {
					"type": "string",
					"value": "CoupledDEVSIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						50,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						4,
						2
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"30": {
								"width": {
									"type": "double",
									"value": 250
								},
								"height": {
									"type": "double",
									"value": 250
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.07,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										28
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"31": {
								"textContent": {
									"type": "string",
									"value": "Railway"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										7
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/CoupledDEVS/145.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon"
			},
			"146": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						131,
						455
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "g64"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Generator"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/146.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"147": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						381,
						530
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/147.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"148": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						231,
						505
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/148.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"149": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						281,
						455
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_64"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":PollQueue"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/149.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"150": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						281,
						505
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/150.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"151": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						381,
						480
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/151.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"152": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						381,
						505
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/152.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"153": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						207.4449404656651,
						735.442410705387
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/153.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/149.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/153.instance": "M281,455L331,492.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/153.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/147.instance": "M331,492.5L381,530"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"154": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						207.4449404656651,
						735.442410705387
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/154.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/149.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/154.instance": "M281,455L331,467.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/154.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/151.instance": "M331,467.5L381,480"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"156": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						207.4449404656651,
						735.442410705387
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/156.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/156.instance": "M50,200L90.5,327.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/156.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/146.instance": "M90.5,327.5L131,455"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"157": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						207.4449404656651,
						735.442410705387
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/157.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/157.instance": "M50,200L165.5,327.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/157.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/149.instance": "M165.5,327.5L281,455"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"158": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						207.4449404656651,
						735.442410705387
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/158.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StationIcon/64.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/158.instance": "M131,455L206,455",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/158.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/149.instance": "M206,455L281,455"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"159": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						207.4449404656651,
						735.442410705387
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/159.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/146.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/159.instance": "M131,455L181,480",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/159.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/148.instance": "M181,480L231,505"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"160": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						207.4449404656651,
						735.442410705387
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/160.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/149.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/160.instance": "M281,455L281,480",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/160.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/150.instance": "M281,480L281,505"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"161": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						207.4449404656651,
						735.442410705387
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/161.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/149.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/161.instance": "M281,455L331,480",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/161.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/152.instance": "M331,480L381,505"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"162": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						126,
						142
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "g40"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Generator"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/162.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"163": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						376,
						217
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/163.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"164": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						226,
						192
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/164.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"165": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						276,
						142
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_40"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":PollQueue"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/165.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"166": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						276,
						192
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/166.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"167": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						376,
						167
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/167.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"168": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						376,
						192
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/168.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"169": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						215.30208332280796,
						495.72812499110125
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/169.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/165.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/169.instance": "M276,142L326,179.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/169.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/163.instance": "M326,179.5L376,217"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"170": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						215.30208332280796,
						495.72812499110125
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/170.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/165.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/170.instance": "M276,142L326,154.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/170.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/167.instance": "M326,154.5L376,167"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"172": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						215.30208332280796,
						495.72812499110125
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/172.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/172.instance": "M50,200L88,171",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/172.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/162.instance": "M88,171L126,142"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"173": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						215.30208332280796,
						495.72812499110125
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/173.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/173.instance": "M50,200L163,171",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/173.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/165.instance": "M163,171L276,142"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"174": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						215.30208332280796,
						495.72812499110125
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/174.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StationIcon/40.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/174.instance": "M126,142L201,142",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/174.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/165.instance": "M201,142L276,142"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"175": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						215.30208332280796,
						495.72812499110125
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/175.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/162.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/175.instance": "M126,142L176,167",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/175.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/164.instance": "M176,167L226,192"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"176": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						215.30208332280796,
						495.72812499110125
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/176.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/165.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/176.instance": "M276,142L276,167",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/176.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/166.instance": "M276,167L276,192"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"177": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						215.30208332280796,
						495.72812499110125
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/177.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/165.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/177.instance": "M276,142L326,167",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/177.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/168.instance": "M326,167L376,192"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"178": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						128,
						294
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "g43"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Generator"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/178.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"179": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						378,
						369
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/179.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"180": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						228,
						344
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/180.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"181": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						278,
						294
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_43"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":PollQueue"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/181.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"182": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						278,
						344
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/182.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"183": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						378,
						319
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/183.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"184": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						378,
						344
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/184.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"185": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						689.7306547513793,
						513.8709821339584
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/185.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/181.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/185.instance": "M278,294L328,331.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/185.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/179.instance": "M328,331.5L378,369"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"186": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						689.7306547513793,
						513.8709821339584
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/186.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/181.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/186.instance": "M278,294L328,306.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/186.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/183.instance": "M328,306.5L378,319"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"188": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						689.7306547513793,
						513.8709821339584
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/188.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/188.instance": "M50,200L89,247",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/188.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/178.instance": "M89,247L128,294"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"189": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						689.7306547513793,
						513.8709821339584
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/189.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/189.instance": "M50,200L164,247",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/189.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/181.instance": "M164,247L278,294"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"190": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						689.7306547513793,
						513.8709821339584
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/190.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StationIcon/43.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/190.instance": "M128,294L203,294",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/190.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/181.instance": "M203,294L278,294"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"191": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						689.7306547513793,
						513.8709821339584
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/191.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/178.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/191.instance": "M128,294L178,319",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/191.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/180.instance": "M178,319L228,344"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"192": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						689.7306547513793,
						513.8709821339584
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/192.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/181.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/192.instance": "M278,294L278,319",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/192.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/182.instance": "M278,319L278,344"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"193": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						689.7306547513793,
						513.8709821339584
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/193.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/181.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/193.instance": "M278,294L328,319",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/193.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/184.instance": "M328,319L378,344"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"194": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;76,100%",
										"0;-12,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/194.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/164.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/194.instance": "M226,192L251,192",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/194.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/166.instance": "M251,192L276,192"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"195": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;81,100%",
										"0;301,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/195.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/148.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/195.instance": "M231,505L256,505",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/195.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/150.instance": "M256,505L281,505"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"196": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;78,100%",
										"0;140,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/196.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/180.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/196.instance": "M228,344L253,344",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/196.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/182.instance": "M253,344L278,344"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"197": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1399,
						474
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/197.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"198": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1399,
						524
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/198.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"199": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1399,
						499
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/199.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"200": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1399,
						449
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_69"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Collector"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/200.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"201": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						480,
						663.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/201.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/201.instance": "M50,200L724.5,324.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/201.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/200.instance": "M724.5,324.5L1399,449"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"202": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						480,
						663.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/202.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StationIcon/69.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/202.instance": "M1399,449L1399,449",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/202.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/200.instance": "M1399,449L1399,449"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"203": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						480,
						663.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/203.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/200.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/203.instance": "M1399,449L1399,461.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/203.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/197.instance": "M1399,461.5L1399,474"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"204": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						480,
						663.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/204.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/200.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/204.instance": "M1399,449L1399,486.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/204.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/198.instance": "M1399,486.5L1399,524"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"205": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						480,
						663.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/205.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/200.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/205.instance": "M1399,449L1399,474",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/205.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/199.instance": "M1399,474L1399,499"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"206": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1398,
						315
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/206.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"207": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1398,
						365
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/207.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"208": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1398,
						340
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/208.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"209": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1398,
						290
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_13"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Collector"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/209.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"210": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						897.2,
						464.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/210.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/210.instance": "M50,200L724,245",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/210.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/209.instance": "M724,245L1398,290"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"211": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						897.2,
						464.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/211.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StationIcon/13.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/211.instance": "M1398,290L1398,290",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/211.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/209.instance": "M1398,290L1398,290"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"212": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						897.2,
						464.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/212.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/209.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/212.instance": "M1398,290L1398,302.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/212.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/206.instance": "M1398,302.5L1398,315"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"213": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						897.2,
						464.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/213.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/209.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/213.instance": "M1398,290L1398,327.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/213.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/207.instance": "M1398,327.5L1398,365"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"214": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						897.2,
						464.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/214.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/209.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/214.instance": "M1398,290L1398,315",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/214.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/208.instance": "M1398,315L1398,340"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"215": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1393,
						165
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/215.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"216": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1393,
						215
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/216.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"217": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1393,
						190
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/217.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"218": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1393,
						140
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_12"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Collector"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/218.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"219": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						486,
						437.9
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/219.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/219.instance": "M50,200L721.5,170",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/219.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/218.instance": "M721.5,170L1393,140"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"220": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						486,
						437.9
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/220.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StationIcon/12.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/220.instance": "M1393,140L1393,140",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/220.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/218.instance": "M1393,140L1393,140"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"221": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						486,
						437.9
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/221.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/218.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/221.instance": "M1393,140L1393,152.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/221.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/215.instance": "M1393,152.5L1393,165"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"222": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						486,
						437.9
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/222.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/218.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/222.instance": "M1393,140L1393,177.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/222.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/216.instance": "M1393,177.5L1393,215"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"223": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						486,
						437.9
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/223.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/218.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/223.instance": "M1393,140L1393,165",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/223.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/217.instance": "M1393,165L1393,190"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"224": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						668,
						325
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/224.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"225": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						668,
						250
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_35"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Join"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/225.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"226": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						668,
						300
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/226.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"227": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						768,
						275
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/227.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"228": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						768,
						300
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/228.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"229": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						768,
						325
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/229.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"230": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						668,
						275
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/230.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"231": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						359,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/231.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/225.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/231.instance": "M668,250L718,275",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/231.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/228.instance": "M718,275L768,300"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"232": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						359,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/232.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/225.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/232.instance": "M668,250L332.5,145",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/232.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/224.instance": "M332.5,145L-3,40"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"233": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						359,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/233.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/225.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/233.instance": "M668,250L718,287.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/233.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/229.instance": "M718,287.5L768,325"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"234": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						359,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/234.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/225.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/234.instance": "M668,250L718,262.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/234.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/227.instance": "M718,262.5L768,275"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"235": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						359,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/235.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/225.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/235.instance": "M668,250L668,275",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/235.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/226.instance": "M668,275L668,300"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"236": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						359,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/236.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/225.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/236.instance": "M668,250L668,262.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/236.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/230.instance": "M668,262.5L668,275"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"237": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						359,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/237.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/35.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/237.instance": "M668,250L668,250",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/237.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/225.instance": "M668,250L668,250"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"238": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						359,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/238.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/238.instance": "M50,200L359,225",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/238.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/225.instance": "M359,225L668,250"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"239": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1213,
						251
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/239.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"240": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1213,
						176
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_123"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Join"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/240.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"241": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1213,
						226
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/241.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"242": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1313,
						201
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/242.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"243": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1313,
						226
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/243.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"244": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1313,
						251
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/244.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"245": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1213,
						201
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/245.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"246": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						631.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/246.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/240.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/246.instance": "M1213,176L1263,201",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/246.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/243.instance": "M1263,201L1313,226"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"247": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						631.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/247.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/240.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/247.instance": "M1213,176L1213,213.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/247.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/239.instance": "M1213,213.5L1213,251"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"248": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						631.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/248.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/240.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/248.instance": "M1213,176L1263,213.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/248.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/244.instance": "M1263,213.5L1313,251"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"249": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						631.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/249.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/240.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/249.instance": "M1213,176L1263,188.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/249.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/242.instance": "M1263,188.5L1313,201"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"250": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						631.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/250.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/240.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/250.instance": "M1213,176L1213,201",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/250.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/241.instance": "M1213,201L1213,226"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"251": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						631.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/251.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/240.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/251.instance": "M1213,176L1213,188.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/251.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/245.instance": "M1213,188.5L1213,201"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"252": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						631.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/252.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/123.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/252.instance": "M1213,176L1213,176",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/252.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/240.instance": "M1213,176L1213,176"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"253": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						631.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/253.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/253.instance": "M50,200L631.5,188",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/253.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/240.instance": "M631.5,188L1213,176"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"254": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1218,
						401
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/254.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"255": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1218,
						326
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_131"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Join"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/255.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"256": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1218,
						376
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/256.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"257": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1318,
						351
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/257.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"258": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1318,
						376
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/258.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"259": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1318,
						401
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/259.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"260": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1218,
						351
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/260.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"261": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/261.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/255.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/261.instance": "M1218,326L1268,351",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/261.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/258.instance": "M1268,351L1318,376"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"262": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/262.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/255.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/262.instance": "M1218,326L1218,363.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/262.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/254.instance": "M1218,363.5L1218,401"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"263": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/263.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/255.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/263.instance": "M1218,326L1268,363.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/263.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/259.instance": "M1268,363.5L1318,401"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"264": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/264.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/255.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/264.instance": "M1218,326L1268,338.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/264.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/257.instance": "M1268,338.5L1318,351"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"265": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/265.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/255.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/265.instance": "M1218,326L1218,351",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/265.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/256.instance": "M1218,351L1218,376"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"266": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/266.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/255.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/266.instance": "M1218,326L1218,338.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/266.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/260.instance": "M1218,338.5L1218,351"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"267": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/267.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/131.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/267.instance": "M1218,326L1218,326",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/267.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/255.instance": "M1218,326L1218,326"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"268": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/268.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/268.instance": "M50,200L634,263",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/268.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/255.instance": "M634,263L1218,326"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"269": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						671,
						486
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/269.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"270": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						671,
						411
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_59"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Join"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/270.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"271": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						671,
						461
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/271.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"272": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						771,
						436
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/272.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"273": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						771,
						461
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/273.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"274": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						771,
						486
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/274.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"275": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						671,
						436
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/275.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"276": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						360.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/276.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/270.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/276.instance": "M671,411L721,436",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/276.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/273.instance": "M721,436L771,461"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"277": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						360.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/277.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/270.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/277.instance": "M671,411L671,448.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/277.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/269.instance": "M671,448.5L671,486"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"278": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						360.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/278.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/270.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/278.instance": "M671,411L721,448.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/278.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/274.instance": "M721,448.5L771,486"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"279": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						360.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/279.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/270.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/279.instance": "M671,411L721,423.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/279.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/272.instance": "M721,423.5L771,436"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"280": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						360.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/280.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/270.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/280.instance": "M671,411L671,436",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/280.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/271.instance": "M671,436L671,461"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"281": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						360.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/281.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/270.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/281.instance": "M671,411L671,423.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/281.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/275.instance": "M671,423.5L671,436"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"282": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						360.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/282.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/JunctionIcon/59.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/282.instance": "M671,411L671,411",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/282.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/270.instance": "M671,411L671,411"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"283": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						360.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/283.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/283.instance": "M50,200L360.5,305.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/283.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/270.instance": "M360.5,305.5L671,411"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"284": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						852,
						281
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/284.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"285": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						952,
						322
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/285.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"286": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						852,
						306
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/286.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"287": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						852,
						256
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_32"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Split"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/287.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"288": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						952,
						272
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/288.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"289": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						952,
						289
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/289.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"290": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						952,
						339
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/290.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"291": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						952,
						305
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/291.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"292": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						852,
						331
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/292.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"293": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/293.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/287.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/293.instance": "M852,256L902,289",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/293.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/285.instance": "M902,289L952,322"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"294": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/294.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/287.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/294.instance": "M852,256L902,264",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/294.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/288.instance": "M902,264L952,272"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"295": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/295.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/287.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/295.instance": "M852,256L852,281",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/295.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/286.instance": "M852,281L852,306"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"296": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/296.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/287.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/296.instance": "M852,256L852,268.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/296.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/284.instance": "M852,268.5L852,281"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"297": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/297.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/287.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/297.instance": "M852,256L902,272.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/297.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/289.instance": "M902,272.5L952,289"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"298": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/298.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/32.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/298.instance": "M852,256L852,256",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/298.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/287.instance": "M852,256L852,256"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"299": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/299.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/287.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/299.instance": "M852,256L902,297.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/299.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/290.instance": "M902,297.5L952,339"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"300": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/300.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/287.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/300.instance": "M852,256L852,293.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/300.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/292.instance": "M852,293.5L852,331"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"301": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/301.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/301.instance": "M50,200L451,228",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/301.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/287.instance": "M451,228L852,256"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"302": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/302.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/287.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/302.instance": "M852,256L902,280.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/302.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/291.instance": "M902,280.5L952,305"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"303": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						311,
						356
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/303.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"304": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						411,
						397
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/304.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"305": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						311,
						381
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/305.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"306": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						311,
						331
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_112"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Split"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/306.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"307": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						411,
						347
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/307.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"308": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						411,
						364
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/308.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"309": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						411,
						414
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/309.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"310": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						411,
						380
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/310.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"311": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						311,
						406
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/311.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"312": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						265.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/312.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/306.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/312.instance": "M311,331L154,175.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/312.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/304.instance": "M154,175.5L-3,20"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"313": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						265.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/313.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/306.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/313.instance": "M311,331L361,339",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/313.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/307.instance": "M361,339L411,347"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"314": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						265.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/314.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/306.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/314.instance": "M311,331L311,356",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/314.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/305.instance": "M311,356L311,381"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"315": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						265.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/315.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/306.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/315.instance": "M311,331L154,205.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/315.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/303.instance": "M154,205.5L-3,80"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"316": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						265.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/316.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/306.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/316.instance": "M311,331L361,347.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/316.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/308.instance": "M361,347.5L411,364"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"317": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						265.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/317.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/112.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/317.instance": "M311,331L311,331",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/317.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/306.instance": "M311,331L311,331"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"318": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						265.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/318.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/306.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/318.instance": "M311,331L361,372.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/318.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/309.instance": "M361,372.5L411,414"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"319": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						265.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/319.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/306.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/319.instance": "M311,331L311,368.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/319.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/311.instance": "M311,368.5L311,406"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"320": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						265.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/320.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/320.instance": "M50,200L180.5,265.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/320.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/306.instance": "M180.5,265.5L311,331"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"321": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						265.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/321.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/306.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/321.instance": "M311,331L361,355.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/321.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/310.instance": "M361,355.5L411,380"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"322": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						862,
						435
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/322.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"323": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						962,
						476
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/323.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"324": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						862,
						460
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/324.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"325": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						862,
						410
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_66"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Split"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/325.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"326": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						962,
						426
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/326.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"327": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						962,
						443
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/327.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"328": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						962,
						493
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/328.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"329": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						962,
						459
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/329.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"330": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						862,
						485
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/330.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"331": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						456,
						305
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/331.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/325.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/331.instance": "M862,410L912,443",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/331.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/323.instance": "M912,443L962,476"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"332": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						456,
						305
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/332.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/325.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/332.instance": "M862,410L912,418",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/332.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/326.instance": "M912,418L962,426"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"333": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						456,
						305
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/333.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/325.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/333.instance": "M862,410L862,435",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/333.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/324.instance": "M862,435L862,460"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"334": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						456,
						305
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/334.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/325.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/334.instance": "M862,410L862,422.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/334.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/322.instance": "M862,422.5L862,435"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"335": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						456,
						305
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/335.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/325.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/335.instance": "M862,410L912,426.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/335.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/327.instance": "M912,426.5L962,443"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"336": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						456,
						305
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/336.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/66.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/336.instance": "M862,410L862,410",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/336.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/325.instance": "M862,410L862,410"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"337": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						456,
						305
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/337.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/325.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/337.instance": "M862,410L912,451.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/337.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/328.instance": "M912,451.5L962,493"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"338": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						456,
						305
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/338.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/325.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/338.instance": "M862,410L862,447.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/338.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/330.instance": "M862,447.5L862,485"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"339": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						456,
						305
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/339.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/339.instance": "M50,200L456,305",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/339.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/325.instance": "M456,305L862,410"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"340": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						456,
						305
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/340.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/325.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/340.instance": "M862,410L912,434.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/340.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/329.instance": "M912,434.5L962,459"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"341": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						307,
						203
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/341.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"342": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						407,
						244
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/342.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"343": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						307,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/343.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"344": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						307,
						178
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_104"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":Split"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/344.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"345": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						407,
						194
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/345.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"346": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						407,
						211
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/346.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"347": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						407,
						261
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/347.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"348": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						407,
						227
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/348.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"349": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						307,
						253
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/349.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"350": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						178.5,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/350.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/344.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/350.instance": "M307,178L357,211",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/350.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/342.instance": "M357,211L407,244"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"351": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						178.5,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/351.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/344.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/351.instance": "M307,178L357,186",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/351.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/345.instance": "M357,186L407,194"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"352": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						178.5,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/352.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/344.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/352.instance": "M307,178L307,203",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/352.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/343.instance": "M307,203L307,228"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"353": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						178.5,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/353.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/344.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/353.instance": "M307,178L307,190.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/353.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/341.instance": "M307,190.5L307,203"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"354": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						178.5,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/354.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/344.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/354.instance": "M307,178L357,194.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/354.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/346.instance": "M357,194.5L407,211"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"355": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						178.5,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/355.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/TurnoutIcon/104.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/355.instance": "M307,178L307,178",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/355.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/344.instance": "M307,178L307,178"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"356": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						178.5,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/356.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/344.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/356.instance": "M307,178L357,219.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/356.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/347.instance": "M357,219.5L407,261"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"357": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						178.5,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/357.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/344.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/357.instance": "M307,178L307,215.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/357.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/349.instance": "M307,215.5L307,253"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"358": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						178.5,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/358.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/358.instance": "M50,200L178.5,189",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/358.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/344.instance": "M178.5,189L307,178"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"359": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						178.5,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/359.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/344.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/359.instance": "M307,178L357,202.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/359.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/348.instance": "M357,202.5L407,227"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"360": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						311,
						491
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_119"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/360.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"361": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						311,
						566
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/361.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"362": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						411,
						541
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/362.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"363": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						411,
						566
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/363.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"364": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						311,
						516
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/364.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"365": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						411,
						516
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/365.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"366": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						311,
						541
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/366.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"367": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/367.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/119.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/367.instance": "M311,491L311,491",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/367.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/360.instance": "M311,491L311,491"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"368": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/368.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/360.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/368.instance": "M311,491L361,503.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/368.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/365.instance": "M361,503.5L411,516"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"369": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/369.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/360.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/369.instance": "M311,491L361,528.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/369.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/363.instance": "M361,528.5L411,566"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"370": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/370.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/360.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/370.instance": "M311,491L311,503.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/370.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/364.instance": "M311,503.5L311,516"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"371": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/371.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/371.instance": "M50,200L180.5,345.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/371.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/360.instance": "M180.5,345.5L311,491"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"372": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/372.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/360.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/372.instance": "M311,491L311,528.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/372.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/361.instance": "M311,528.5L311,566"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"373": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/373.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/360.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/373.instance": "M311,491L361,516",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/373.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/362.instance": "M361,516L411,541"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"374": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						180.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/374.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/360.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/374.instance": "M311,491L311,516",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/374.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/366.instance": "M311,516L311,541"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"375": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						491,
						491
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_118"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/375.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"376": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						491,
						566
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/376.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"377": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						591,
						541
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/377.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"378": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						591,
						566
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/378.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"379": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						491,
						516
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/379.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"380": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						591,
						516
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/380.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"381": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						491,
						541
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/381.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"382": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/382.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/118.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/382.instance": "M491,491L491,491",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/382.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/375.instance": "M491,491L491,491"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"383": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/383.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/375.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/383.instance": "M491,491L541,503.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/383.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/380.instance": "M541,503.5L591,516"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"384": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/384.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/375.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/384.instance": "M491,491L541,528.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/384.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/378.instance": "M541,528.5L591,566"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"385": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/385.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/375.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/385.instance": "M491,491L491,503.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/385.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/379.instance": "M491,503.5L491,516"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"386": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/386.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/386.instance": "M50,200L270.5,345.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/386.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/375.instance": "M270.5,345.5L491,491"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"387": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/387.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/375.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/387.instance": "M491,491L491,528.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/387.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/376.instance": "M491,528.5L491,566"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"388": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/388.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/375.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/388.instance": "M491,491L541,516",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/388.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/377.instance": "M541,516L591,541"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"389": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						345.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/389.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/375.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/389.instance": "M491,491L491,516",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/389.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/381.instance": "M491,516L491,541"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"390": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						853,
						176
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_27"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/390.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"391": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						853,
						251
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/391.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"392": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						953,
						226
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/392.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"393": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						953,
						251
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/393.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"394": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						853,
						201
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/394.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"395": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						953,
						201
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/395.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"396": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						853,
						226
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/396.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"397": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/397.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/27.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/397.instance": "M853,176L853,176",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/397.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/390.instance": "M853,176L853,176"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"398": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/398.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/390.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/398.instance": "M853,176L903,188.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/398.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/395.instance": "M903,188.5L953,201"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"399": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/399.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/390.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/399.instance": "M853,176L903,213.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/399.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/393.instance": "M903,213.5L953,251"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"400": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/400.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/390.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/400.instance": "M853,176L853,188.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/400.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/394.instance": "M853,188.5L853,201"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"401": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/401.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/401.instance": "M50,200L451.5,188",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/401.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/390.instance": "M451.5,188L853,176"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"402": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/402.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/390.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/402.instance": "M853,176L853,213.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/402.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/391.instance": "M853,213.5L853,251"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"403": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/403.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/390.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/403.instance": "M853,176L903,201",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/403.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/392.instance": "M903,201L953,226"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"404": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						451.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/404.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/390.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/404.instance": "M853,176L853,201",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/404.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/396.instance": "M853,201L853,226"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"405": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						485,
						270
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_107"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/405.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"406": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						485,
						345
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/406.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"407": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						588,
						300
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/407.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"408": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						588,
						325
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/408.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"409": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488,
						275
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/409.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"410": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						588,
						275
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/410.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"411": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488,
						300
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/411.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"412": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/412.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/107.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/412.instance": "M488,250L488,250",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/412.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/405.instance": "M488,250L488,250"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"413": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/413.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/405.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/413.instance": "M488,250L538,262.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/413.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/410.instance": "M538,262.5L588,275"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"414": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/414.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/405.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/414.instance": "M488,250L538,287.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/414.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/408.instance": "M538,287.5L588,325"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"415": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/415.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/405.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/415.instance": "M488,250L488,262.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/415.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/409.instance": "M488,262.5L488,275"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"416": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/416.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/416.instance": "M50,200L269,225",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/416.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/405.instance": "M269,225L488,250"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"418": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/418.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/405.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/418.instance": "M488,250L538,275",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/418.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/407.instance": "M538,275L588,300"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"419": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						225
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/419.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/405.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/419.instance": "M488,250L488,275",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/419.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/411.instance": "M488,275L488,300"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"420": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						666,
						178
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_30"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/420.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"421": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						666,
						253
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/421.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"422": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						766,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/422.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"423": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						766,
						253
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/423.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"424": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						666,
						203
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/424.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"425": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						766,
						203
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/425.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"426": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						666,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/426.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"427": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						358,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/427.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/30.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/427.instance": "M666,178L666,178",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/427.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/420.instance": "M666,178L666,178"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"428": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						358,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/428.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/420.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/428.instance": "M666,178L716,190.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/428.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/425.instance": "M716,190.5L766,203"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"429": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						358,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/429.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/420.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/429.instance": "M666,178L716,215.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/429.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/423.instance": "M716,215.5L766,253"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"430": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						358,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/430.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/420.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/430.instance": "M666,178L666,190.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/430.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/424.instance": "M666,190.5L666,203"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"431": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						358,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/431.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/431.instance": "M50,200L358,189",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/431.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/420.instance": "M358,189L666,178"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"432": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						358,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/432.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/420.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/432.instance": "M666,178L666,215.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/432.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/421.instance": "M666,215.5L666,253"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"433": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						358,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/433.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/420.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/433.instance": "M666,178L716,203",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/433.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/422.instance": "M716,203L766,228"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"434": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						358,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/434.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/420.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/434.instance": "M666,178L666,203",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/434.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/426.instance": "M666,203L666,228"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"435": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						485,
						350
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_110"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/435.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"436": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						485,
						425
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/436.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"437": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						588,
						380
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/437.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"438": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						588,
						405
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/438.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"439": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488,
						355
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/439.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"440": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						588,
						355
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/440.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"441": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488,
						380
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/441.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"442": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						265
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/442.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/110.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/442.instance": "M488,330L488,330",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/442.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/435.instance": "M488,330L488,330"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"443": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						265
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/443.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/435.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/443.instance": "M488,330L538,342.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/443.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/440.instance": "M538,342.5L588,355"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"444": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						265
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/444.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/435.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/444.instance": "M488,330L538,367.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/444.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/438.instance": "M538,367.5L588,405"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"445": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						265
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/445.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/435.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/445.instance": "M488,330L488,342.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/445.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/439.instance": "M488,342.5L488,355"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"446": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						265
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/446.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/446.instance": "M50,200L269,265",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/446.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/435.instance": "M269,265L488,330"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"448": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						265
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/448.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/435.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/448.instance": "M488,330L538,355",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/448.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/437.instance": "M538,355L588,380"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"449": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						269,
						265
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/449.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/435.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/449.instance": "M488,330L488,355",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/449.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/441.instance": "M488,355L488,380"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"450": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1033,
						176
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_125"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/450.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"451": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1033,
						251
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/451.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"452": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1133,
						226
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/452.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"453": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1133,
						251
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/453.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"454": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1033,
						201
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/454.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"455": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1133,
						201
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/455.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"456": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1033,
						226
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/456.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"457": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/457.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/125.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/457.instance": "M1033,176L1033,176",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/457.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/450.instance": "M1033,176L1033,176"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"458": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/458.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/450.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/458.instance": "M1033,176L1083,188.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/458.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/455.instance": "M1083,188.5L1133,201"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"459": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/459.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/450.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/459.instance": "M1033,176L1083,213.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/459.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/453.instance": "M1083,213.5L1133,251"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"460": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/460.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/450.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/460.instance": "M1033,176L1033,188.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/460.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/454.instance": "M1033,188.5L1033,201"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"461": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/461.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/461.instance": "M50,200L541.5,188",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/461.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/450.instance": "M541.5,188L1033,176"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"462": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/462.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/450.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/462.instance": "M1033,176L1033,213.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/462.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/451.instance": "M1033,213.5L1033,251"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"463": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/463.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/450.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/463.instance": "M1033,176L1083,201",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/463.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/452.instance": "M1083,201L1133,226"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"464": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						188
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/464.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/450.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/464.instance": "M1033,176L1033,201",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/464.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/456.instance": "M1033,201L1033,226"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"465": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1035,
						346
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_133"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/465.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"466": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1035,
						421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/466.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"467": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1138,
						376
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/467.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"468": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1138,
						401
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/468.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"469": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1038,
						351
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/469.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"470": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1138,
						351
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/470.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"471": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1038,
						376
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/471.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"472": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/472.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/133.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/472.instance": "M1038,326L1038,326",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/472.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/465.instance": "M1038,326L1038,326"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"473": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/473.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/465.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/473.instance": "M1038,326L1088,338.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/473.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/470.instance": "M1088,338.5L1138,351"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"474": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/474.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/465.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/474.instance": "M1038,326L1088,363.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/474.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/468.instance": "M1088,363.5L1138,401"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"475": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/475.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/465.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/475.instance": "M1038,326L1038,338.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/475.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/469.instance": "M1038,338.5L1038,351"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"476": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/476.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/476.instance": "M50,200L544,263",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/476.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/465.instance": "M544,263L1038,326"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"478": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/478.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/465.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/478.instance": "M1038,326L1088,351",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/478.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/467.instance": "M1088,351L1138,376"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"479": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						263
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/479.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/465.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/479.instance": "M1038,326L1038,351",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/479.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/471.instance": "M1038,351L1038,376"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"480": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1030,
						276
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_128"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/480.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"481": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1030,
						351
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/481.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"482": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1133,
						306
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/482.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"483": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1133,
						331
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/483.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"484": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1033,
						281
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/484.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"485": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1133,
						281
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/485.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"486": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1033,
						306
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/486.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"487": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/487.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/128.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/487.instance": "M1033,256L1033,256",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/487.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/480.instance": "M1033,256L1033,256"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"488": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/488.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/480.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/488.instance": "M1033,256L1083,268.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/488.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/485.instance": "M1083,268.5L1133,281"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"489": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/489.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/480.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/489.instance": "M1033,256L1083,293.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/489.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/483.instance": "M1083,293.5L1133,331"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"490": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/490.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/480.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/490.instance": "M1033,256L1033,268.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/490.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/484.instance": "M1033,268.5L1033,281"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"491": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/491.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/491.instance": "M50,200L541.5,228",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/491.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/480.instance": "M541.5,228L1033,256"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"493": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/493.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/480.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/493.instance": "M1033,256L1083,281",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/493.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/482.instance": "M1083,281L1133,306"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"494": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						541.5,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/494.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/480.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/494.instance": "M1033,256L1033,281",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/494.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/486.instance": "M1033,281L1033,306"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"495": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						483,
						198
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_102"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/495.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"496": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						483,
						273
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/496.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"497": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						586,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/497.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"498": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						586,
						253
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/498.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"499": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						486,
						203
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/499.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"500": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						586,
						203
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/500.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"501": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						486,
						228
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/501.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"502": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						268,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/502.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/102.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/502.instance": "M486,178L486,178",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/502.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/495.instance": "M486,178L486,178"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"503": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						268,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/503.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/495.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/503.instance": "M486,178L536,190.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/503.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/500.instance": "M536,190.5L586,203"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"504": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						268,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/504.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/495.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/504.instance": "M486,178L536,215.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/504.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/498.instance": "M536,215.5L586,253"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"505": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						268,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/505.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/495.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/505.instance": "M486,178L486,190.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/505.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/499.instance": "M486,190.5L486,203"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"506": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						268,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/506.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/506.instance": "M50,200L268,189",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/506.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/495.instance": "M268,189L486,178"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"508": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						268,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/508.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/495.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/508.instance": "M486,178L536,203",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/508.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/497.instance": "M536,203L586,228"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"509": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						268,
						189
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/509.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/495.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/509.instance": "M486,178L486,203",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/509.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/501.instance": "M486,203L486,228"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"510": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1036,
						505
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_141"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/510.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"511": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1036,
						580
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/511.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"512": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1139,
						535
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/512.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"513": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1139,
						560
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/513.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"514": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1039,
						510
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/514.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"515": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1139,
						510
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/515.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"516": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1039,
						535
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/516.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"517": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/517.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/141.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/517.instance": "M1039,485L1039,485",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/517.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/510.instance": "M1039,485L1039,485"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"518": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/518.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/510.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/518.instance": "M1039,485L1089,497.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/518.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/515.instance": "M1089,497.5L1139,510"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"519": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/519.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/510.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/519.instance": "M1039,485L1089,522.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/519.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/513.instance": "M1089,522.5L1139,560"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"520": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/520.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/510.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/520.instance": "M1039,485L1039,497.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/520.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/514.instance": "M1039,497.5L1039,510"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"521": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/521.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/521.instance": "M50,200L544.5,342.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/521.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/510.instance": "M544.5,342.5L1039,485"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"523": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/523.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/510.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/523.instance": "M1039,485L1089,510",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/523.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/512.instance": "M1089,510L1139,535"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"524": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/524.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/510.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/524.instance": "M1039,485L1039,510",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/524.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/516.instance": "M1039,510L1039,535"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"525": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488,
						431
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_115"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/525.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"526": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488,
						506
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/526.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"527": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						591,
						461
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/527.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"528": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						591,
						486
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/528.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"529": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						491,
						436
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/529.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"530": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						591,
						436
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/530.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"531": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						491,
						461
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/531.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"532": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/532.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/115.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/532.instance": "M491,411L491,411",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/532.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/525.instance": "M491,411L491,411"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"533": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/533.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/525.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/533.instance": "M491,411L541,423.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/533.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/530.instance": "M541,423.5L591,436"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"534": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/534.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/525.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/534.instance": "M491,411L541,448.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/534.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/528.instance": "M541,448.5L591,486"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"535": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/535.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/525.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/535.instance": "M491,411L491,423.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/535.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/529.instance": "M491,423.5L491,436"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"536": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/536.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/536.instance": "M50,200L270.5,305.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/536.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/525.instance": "M270.5,305.5L491,411"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"538": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/538.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/525.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/538.instance": "M491,411L541,436",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/538.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/527.instance": "M541,436L591,461"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"539": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						270.5,
						305.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/539.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/525.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/539.instance": "M491,411L491,436",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/539.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/531.instance": "M491,436L491,461"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"540": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1035,
						426
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_136"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/540.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"541": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1035,
						501
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/541.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"542": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1138,
						456
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/542.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"543": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1138,
						481
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/543.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"544": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1038,
						431
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/544.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"545": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1138,
						431
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/545.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"546": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1038,
						456
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/546.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"547": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						303
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/547.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/136.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/547.instance": "M1038,406L1038,406",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/547.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/540.instance": "M1038,406L1038,406"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"548": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						303
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/548.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/540.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/548.instance": "M1038,406L1088,418.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/548.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/545.instance": "M1088,418.5L1138,431"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"549": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						303
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/549.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/540.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/549.instance": "M1038,406L1088,443.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/549.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/543.instance": "M1088,443.5L1138,481"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"550": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						303
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/550.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/540.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/550.instance": "M1038,406L1038,418.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/550.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/544.instance": "M1038,418.5L1038,431"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"551": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						303
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/551.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/551.instance": "M50,200L544,303",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/551.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/540.instance": "M544,303L1038,406"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"553": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						303
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/553.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/540.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/553.instance": "M1038,406L1088,431",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/553.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/542.instance": "M1088,431L1138,456"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"554": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						544,
						303
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/554.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/540.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/554.instance": "M1038,406L1038,431",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/554.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/546.instance": "M1038,431L1038,456"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"555": {
				"typename": {
					"type": "string",
					"value": "DevsInstanceIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1219,
						485
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position'), 'scale': getAttr('scale')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"104": {
								"textContent": {
									"type": "string",
									"value": "_139"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										15,
										26
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"110": {
								"textContent": {
									"type": "string",
									"value": ":RailwaySegment"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': ':' + getAttr('devs_type')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										33,
										46
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"117": {
								"width": {
									"type": "double",
									"value": 100
								},
								"height": {
									"type": "double",
									"value": 100
								},
								"cornerRadius": {
									"type": "double",
									"value": 5
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 0.15,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										7,
										4
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"119": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										22.791684421312993,
										19.099999244142055
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"120": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										31.6796875,
										29
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "117",
								"dest": "119"
							},
							{
								"src": "119",
								"dest": "104"
							},
							{
								"src": "117",
								"dest": "120"
							},
							{
								"src": "120",
								"dest": "110"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance/555.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon"
			},
			"556": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1219,
						560
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "train_in"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/556.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"557": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1319,
						535
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_send"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/557.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"558": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1319,
						560
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "train_out"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/558.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"559": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1219,
						510
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_recv"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/559.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"560": {
				"typename": {
					"type": "string",
					"value": "InputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1319,
						510
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': getAttr('position')})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"54": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "green",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										5,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"55": {
								"textContent": {
									"type": "string",
									"value": "Q_rack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort/560.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon"
			},
			"561": {
				"typename": {
					"type": "string",
					"value": "OutputPortIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1219,
						535
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'position': [getAttr('position')[0], getAttr('position')[1]]})"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'position': getAttr('position')})"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"48": {
								"r": {
									"type": "double",
									"value": 7
								},
								"sides": {
									"type": "int",
									"value": 4
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "purple",
										"fill-opacity": 1,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Polygon",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										1
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"50": {
								"textContent": {
									"type": "string",
									"value": "Q_sack"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#ffffff",
										"stroke-dasharray": "",
										"fill": "#000000",
										"fill-opacity": 1,
										"font-size": "12px",
										"stroke-width": 0,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										21
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort/561.instance"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon"
			},
			"562": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/562.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/Railway/Railway.defaultIcons/StraightIcon/139.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/562.instance": "M1219,485L1219,485",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/562.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/555.instance": "M1219,485L1219,485"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"563": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/563.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/555.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/563.instance": "M1219,485L1269,497.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/563.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/560.instance": "M1269,497.5L1319,510"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"564": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/564.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/555.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/564.instance": "M1219,485L1269,522.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/564.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/558.instance": "M1269,522.5L1319,560"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"565": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/565.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/555.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/565.instance": "M1219,485L1219,497.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/565.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/559.instance": "M1219,497.5L1219,510"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"566": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 0,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "submodelsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels/566.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/CoupledDEVSIcon/145.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/566.instance": "M50,200L634.5,342.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink/566.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/555.instance": "M634.5,342.5L1219,485"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/submodelsLink"
			},
			"567": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/567.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/555.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/567.instance": "M1219,485L1219,522.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/567.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/556.instance": "M1219,522.5L1219,560"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"568": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/568.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/555.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/568.instance": "M1219,485L1269,510",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/568.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/557.instance": "M1269,510L1319,535"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"569": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						634.5,
						342.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/569.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/555.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/569.instance": "M1219,485L1219,510",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/569.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/561.instance": "M1219,510L1219,535"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"570": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/570.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/405.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/570.instance": "M488,250L488,287.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/570.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/406.instance": "M488,287.5L488,325"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"571": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;287.9311739665052,68.04510993672778%",
										"0;142.2781956025309,73.2793491626299%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;47.12109639666145"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/571.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/347.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/571.instance": "M407,261L446,303",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/571.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/406.instance": "M446,303L485,345"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"572": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;203.8217177946014,-60.71718364086966%",
										"0;-3.571312654365215,-79.45705513496526%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-127.38528805796896"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/572.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/411.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/572.instance": "M488,300L447.5,247",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/572.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/345.instance": "M447.5,247L407,194"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"573": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;290.0392095612069,86.02915336341744%",
										"0;71.5588338654633,50.980239030173294%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;30.650667957052868"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/573.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/348.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/573.instance": "M407,227L447.5,251",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/573.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/409.instance": "M447.5,251L488,275"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"574": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/574.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/344.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/574.instance": "M307,178L396,224",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/574.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/405.instance": "M396,224L485,270"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"575": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/575.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/435.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/575.instance": "M488,330L488,367.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/575.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/436.instance": "M488,367.5L488,405"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"576": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;286.4155683896636,93.52862574562836%",
										"0;221.25885497017487,35.389209741589106%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;20.72555886556054"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/576.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/304.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/576.instance": "M411,397L448,411",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/576.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/436.instance": "M448,411L485,425"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"577": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;209.42432280568332,-91.9145030018058%",
										"0;150.67658012007223,-39.39192985791677%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-156.80140948635182"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/577.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/441.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/577.instance": "M488,380L449.5,363.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/577.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/307.instance": "M449.5,363.5L411,347"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"578": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;287.53562881333823,99.3238371471016%",
										"0;151.02704651411594,-11.609279666544344%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-6.666659890901366"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/578.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/308.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/578.instance": "M411,364L449.5,359.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/578.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/439.instance": "M449.5,359.5L488,355"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"579": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/579.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/306.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/579.instance": "M311,331L398,340.5",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/579.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/435.instance": "M398,340.5L485,350"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"580": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/580.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/465.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/580.instance": "M1038,326L1038,363.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/580.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/466.instance": "M1038,363.5L1038,401"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"581": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;837.8112335130131,71.1379212134421%",
										"0;218.15448315146233,70.28083782532836%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;44.652757102914244"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/581.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/290.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/581.instance": "M952,339L993.5,380",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/581.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/466.instance": "M993.5,380L1035,421"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"582": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;748.9174189107575,-63.72643597953047%",
										"0;74.54905743918121,-77.0645272310601%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-129.58813084768298"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/582.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/471.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/582.instance": "M1038,376L995,324",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/582.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/288.instance": "M995,324L952,272"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"583": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;839.8866090013487,88.17846419346917%",
										"0;147.47286143226123,47.16522503371606%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;28.14160123226172"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/583.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/291.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/583.instance": "M952,305L995,328",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/583.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/469.instance": "M995,328L1038,351"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"584": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/584.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/287.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/584.instance": "M852,256L943.5,301",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/584.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/465.instance": "M943.5,301L1035,346"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"585": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/585.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/480.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/585.instance": "M1033,256L1033,293.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/585.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/481.instance": "M1033,293.5L1033,331"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"586": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;831.3939529020525,93.73131582767311%",
										"0;147.25074736689308,34.84882255131436%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;20.39487608204838"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/586.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/285.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/586.instance": "M952,322L991,336.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/586.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/481.instance": "M991,336.5L1030,351"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"587": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;750.4518442210405,-92.20633683509136%",
										"0;75.68825347340365,-38.70389447398897%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-157.2296210912378"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/587.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/486.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/587.instance": "M1033,306L992.5,289",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/587.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/288.instance": "M992.5,289L952,272"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"588": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;832.6068511252263,99.5158089271001%",
										"0;77.019367642916,-9.82872186934322%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-5.640549432156823"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/588.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/289.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/588.instance": "M952,289L992.5,285",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/588.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/484.instance": "M992.5,285L1033,281"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"589": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/589.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/287.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/589.instance": "M852,256L941,266",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/589.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/480.instance": "M941,266L1030,276"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"590": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/590.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/495.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/590.instance": "M486,178L486,215.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/590.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/496.instance": "M486,215.5L486,253"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"591": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;284.42602592792207,93.42928493282386%",
										"0;69.26282860268705,35.650648198051215%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;20.88580146069304"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/591.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/342.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/591.instance": "M407,244L445,258.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/591.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/496.instance": "M445,258.5L483,273"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"592": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;205.41871154914844,-91.85425560093644%",
										"0;-2.3258297759625464,-39.532211271289086%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-156.71393508177644"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/592.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/501.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/592.instance": "M486,228L446.5,211",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/592.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/345.instance": "M446.5,211L407,194"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"593": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;285.5969977852527,99.49117176573006%",
										"0;-0.9796468706292103,-10.075055368681525%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-5.782392322364041"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/593.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/346.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/593.instance": "M407,211L446.5,207",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/593.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/499.instance": "M446.5,207L486,203"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"594": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/594.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/344.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/594.instance": "M307,178L395,188",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/594.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/495.instance": "M395,188L483,198"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"595": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/595.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/510.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/595.instance": "M1039,485L1039,522.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/595.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/511.instance": "M1039,522.5L1039,560"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"596": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;839.0468929942417,64.79025332583056%",
										"0;377.4083898669668,76.17232485604403%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;49.61635209355101"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/596.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/328.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/596.instance": "M962,493L999,536.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/596.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/511.instance": "M999,536.5L1036,580"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"597": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;758.7329594151521,-57.697735099377844%",
										"0;228.30790940397512,-81.67601462119723%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-125.23822522495776"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/597.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/516.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/597.instance": "M1039,535L1000.5,480.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/597.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/326.instance": "M1000.5,480.5L962,426"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"598": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;841.2087962273011,83.37123014813119%",
										"0;306.66515079407475,55.21990568252847%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;33.51800864525191"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/598.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/329.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/598.instance": "M962,459L1000.5,484.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/598.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/514.instance": "M1000.5,484.5L1039,510"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"599": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/599.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/325.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/599.instance": "M862,410L949,457.5",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/599.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/510.instance": "M949,457.5L1036,505"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"600": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/600.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/525.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/600.instance": "M491,411L491,448.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/600.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/526.instance": "M491,448.5L491,486"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"601": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;291.0674123088968,64.18226841985114%",
										"0;303.432709263206,76.68530772241955%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;50.0721328725145"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/601.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/309.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/601.instance": "M411,414L449.5,460",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/601.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/526.instance": "M449.5,460L488,506"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"602": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;207.72577323015034,-57.442574909643%",
										"0;149.2977029963857,-81.8556692462413%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-125.05942696688697"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/602.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/531.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/602.instance": "M491,461L451,404",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/602.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/307.instance": "M451,404L411,347"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"603": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;293.2938493774533,81.92319205190405%",
										"0;232.72307231792385,57.34623443633282%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;34.992020198558656"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/603.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/310.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/603.instance": "M411,380L451,408",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/603.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/529.instance": "M451,408L491,436"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"604": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/604.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/306.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/604.instance": "M311,331L399.5,381",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/604.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/525.instance": "M399.5,381L488,431"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"605": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 0
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "portsLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/ports/605.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/540.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/605.instance": "M1038,406L1038,443.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink/605.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/541.instance": "M1038,443.5L1038,481"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/portsLink"
			},
			"606": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;836.2959718994867,94.6059486625335%",
										"0;297.2157620534987,32.399297487169%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;18.904575842611656"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/606.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/323.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/606.instance": "M962,476L998.5,488.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/606.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/541.instance": "M998.5,488.5L1035,501"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"607": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;760.5313338610558,-93.01552213313228%",
										"0;229.7206208853253,-36.71665347360486%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-158.45902408146156"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/607.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/546.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/607.instance": "M1038,456L1000,441",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/607.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/326.instance": "M1000,441L962,426"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"608": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;837.376149706108,98.7762965329069%",
										"0;227.04894813868373,-15.59625734730109%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-8.972626614896393"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/608.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/327.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/608.instance": "M962,443L1000,437",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/608.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/544.instance": "M1000,437L1038,431"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"609": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/609.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/325.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/609.instance": "M862,410L948.5,418",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/609.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/540.instance": "M948.5,418L1035,426"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"610": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						261.77788220329796,
						518.3562969906079
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;51.05150984718506,-88.92878023181471%",
										"0;51.20085421866463,45.73480126207611%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;152.78388844269253"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/610.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/147.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/610.instance": "M381,530L346,548",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/610.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/361.instance": "M346,548L311,566"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"611": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						261.77788220329796,
						518.3562969906079
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/611.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/149.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/611.instance": "M281,455L296,473",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/611.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/360.instance": "M296,473L311,491"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"612": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						261.77788220329796,
						518.3562969906079
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;49.843069132670564,-98.78771254044861%",
										"0;1.5952115110100067,15.523783399213354%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;171.06940989958102"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/612.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/152.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/612.instance": "M381,505L346,510.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/612.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/364.instance": "M346,510.5L311,516"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"613": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						261.77788220329796,
						518.3562969906079
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;116.59420467283093,75.39095027499123%",
										"0;-41.37193500160754,-65.69782809677807%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-41.069824454274524"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/613.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/366.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/613.instance": "M311,541L346,510.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/613.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/151.instance": "M346,510.5L381,480"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"614": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						261.9057017521701,
						253.54802631391604
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;46.94456227460995,-88.65848461654546%",
										"0;2.9983130707457804,46.256600669502%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;152.4471884232822"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/614.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/163.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/614.instance": "M376,217L341.5,235",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/614.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/349.instance": "M341.5,235L307,253"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"615": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						261.9057017521701,
						253.54802631391604
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/615.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/165.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/615.instance": "M276,142L291.5,160",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/615.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/344.instance": "M291.5,160L307,178"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"616": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						261.9057017521701,
						253.54802631391604
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;45.72402738593786,-98.75297847602428%",
										"0;-46.597907174875075,15.743228452699482%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;170.94211187138237"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/616.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/168.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/616.instance": "M376,192L341.5,197.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/616.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/341.instance": "M341.5,197.5L307,203"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"617": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						261.9057017521701,
						253.54802631391604
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;111.444939972881,74.92037744732602%",
										"0;-89.5448414118091,-66.23395687372302%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-41.47854662307777"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/617.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/343.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/617.instance": "M307,228L341.5,197.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/617.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/167.instance": "M341.5,197.5L376,167"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"618": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						361.25908521081675,
						362.18336465978075
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-48.325394407480076,-87.53870528618741%",
										"0;47.31818355166672,48.34227008341691%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;151.09081634885217"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/618.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/179.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/618.instance": "M378,369L344.5,387.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/618.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/311.instance": "M344.5,387.5L311,406"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"619": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						361.25908521081675,
						362.18336465978075
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/619.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/181.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/619.instance": "M278,294L294.5,312.5",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/619.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/306.instance": "M294.5,312.5L311,331"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"620": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						361.25908521081675,
						362.18336465978075
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-49.55388880968434,-98.43366432473037%",
										"0;-2.246018086791537,17.629910028309904%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;169.84573341979976"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/620.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/184.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/620.instance": "M378,344L344.5,350",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/620.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/303.instance": "M344.5,350L311,356"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"621": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						361.25908521081675,
						362.18336465978075
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;14.02415656824985,73.39629064618474%",
										"0;-46.11921628562811,-67.91895552333513%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-42.78034444680211"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/621.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/305.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/621.instance": "M311,381L344.5,350",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/621.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/183.instance": "M344.5,350L378,319"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"622": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						628.2631578947369,
						262.6578947368421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;224.02183030521473,99.7458699830735%",
										"0;64.352270463835,7.124704998790963%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;4.085616779974877"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/622.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/229.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/622.instance": "M768,325L810,328",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/622.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/292.instance": "M810,328L852,331"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"623": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						628.2631578947369,
						262.6578947368421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/623.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/225.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/623.instance": "M668,250L760,253",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/623.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/287.instance": "M760,253L852,256"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"624": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						628.2631578947369,
						262.6578947368421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;222.8543731161277,97.53604616760359%",
										"0;14.440663416453788,-22.061724728386526%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-12.745289473132855"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/624.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/228.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/624.instance": "M768,300L810,290.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/624.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/284.instance": "M810,290.5L852,281"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"625": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						628.2631578947369,
						262.6578947368421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;138.35195062553362,-93.81522927199968%",
										"0;16.094714434037883,-34.622286993237964%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-159.7435378254769"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/625.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/286.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/625.instance": "M852,306L810,290.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/625.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/227.instance": "M810,290.5L768,275"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"626": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1011.5866287256846,
						240.4507823633098
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;379.7719125650002,91.19215051751064%",
										"0;-29.098468384010232,-41.036467732879785%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-24.22774531795417"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/626.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/244.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/626.instance": "M1313,251L1353,233",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/626.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/216.instance": "M1353,233L1393,215"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"627": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1011.5866287256846,
						240.4507823633098
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/627.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/240.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/627.instance": "M1213,176L1303,158",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/627.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/218.instance": "M1303,158L1393,140"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"628": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1011.5866287256846,
						240.4507823633098
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;378.9880006458329,79.52034847483463%",
										"0;-78.6315963023032,-60.6342657120614%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-37.32552048310607"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/628.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/243.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/628.instance": "M1313,226L1353,195.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/628.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/215.instance": "M1353,195.5L1393,165"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"629": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1011.5866287256846,
						240.4507823633098
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;301.95824463623035,-99.06788398452959%",
										"0;-35.48806700392862,13.621834047872786%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;172.1709234899404"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/629.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/217.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/629.instance": "M1393,190L1353,195.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/629.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/242.instance": "M1353,195.5L1313,201"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"630": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1101.786498848222,
						348.73450801150653
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;294.5720424424628,91.19215051751064%",
										"0;12.61780596779306,-41.036467732879785%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-24.22774531795417"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/630.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/259.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/630.instance": "M1318,401L1358,383",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/630.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/207.instance": "M1358,383L1398,365"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"631": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1101.786498848222,
						348.73450801150653
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/631.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/255.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/631.instance": "M1218,326L1308,308",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/631.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/209.instance": "M1308,308L1398,290"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"632": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1101.786498848222,
						348.73450801150653
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;293.78813052329565,79.52034847483463%",
										"0;-36.9153219504999,-60.6342657120614%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-37.32552048310607"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/632.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/258.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/632.instance": "M1318,376L1358,345.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/632.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/206.instance": "M1358,345.5L1398,315"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"633": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1101.786498848222,
						348.73450801150653
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;216.75837451369284,-99.06788398452959%",
										"0;6.2282073478746725,13.621834047872786%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;172.1709234899404"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/633.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/208.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/633.instance": "M1398,340L1358,345.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/633.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/257.instance": "M1358,345.5L1318,351"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"634": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						636,
						383.2631578947368
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;225.9560466098336,99.99396262866598%",
										"0;97.73708360011653,-1.0988347541611647%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-0.6295986084102669"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/634.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/274.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/634.instance": "M771,486L816.5,485.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/634.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/330.instance": "M816.5,485.5L862,485"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"635": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						636,
						383.2631578947368
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/635.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/270.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/635.instance": "M671,411L766.5,410.5",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/635.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/325.instance": "M766.5,410.5L862,410"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"636": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						636,
						383.2631578947368
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;224.90111548841048,96.15239476408232%",
										"0;47.89074631469987,-27.472112789737807%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-15.945395900922856"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/636.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/273.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/636.instance": "M771,461L816.5,448",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/636.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/322.instance": "M816.5,448L862,435"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"637": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						636,
						383.2631578947368
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;133.97993484922722,-96.69367575033941%",
										"0;56.60458913527674,-25.501628769320295%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-165.22544972495342"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/637.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/324.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/637.instance": "M862,460L816.5,448",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/637.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/272.instance": "M816.5,448L771,436"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"638": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						349.6578947368421,
						447.1578947368421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;141.34210526315792,100%",
										"0;114.84210526315792,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/638.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/363.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/638.instance": "M411,566L451,566",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/638.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/376.instance": "M451,566L491,566"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"639": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						349.6578947368421,
						447.1578947368421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/639.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/360.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/639.instance": "M311,491L401,491",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/639.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/375.instance": "M401,491L491,491"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"640": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						349.6578947368421,
						447.1578947368421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;140.14900529061413,95.44799780350297%",
										"0;65.02418535101782,-29.827499313594686%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-17.354024636261325"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/640.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/362.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/640.instance": "M411,541L451,528.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/640.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/379.instance": "M451,528.5L491,516"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"641": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						349.6578947368421,
						447.1578947368421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;60.14900529061413,-95.447997803503%",
										"0;72.66002517529802,-29.82749931359463%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-162.6459753637387"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/641.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/381.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/641.instance": "M491,541L451,528.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/641.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/365.instance": "M451,528.5L411,516"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"642": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488.7368421052632,
						416.89473684210526
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;179.4347307699906,70.71067811865476%",
										"0;66.27683603314853,-70.71067811865474%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-45"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/642.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/378.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/642.instance": "M591,566L631,526",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/642.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/269.instance": "M631,526L671,486"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"643": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488.7368421052632,
						416.89473684210526
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/643.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/375.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/643.instance": "M491,491L581,451",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/643.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/270.instance": "M581,451L671,411"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"644": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488.7368421052632,
						416.89473684210526
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;179.08143101460684,60.60432152628561%",
										"0;16.68109029684331,-79.54317200324988%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-52.69605172201657"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/644.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/377.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/644.instance": "M591,541L631,488.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/644.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/275.instance": "M631,488.5L671,436"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"645": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488.7368421052632,
						416.89473684210526
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;104.52927318628508,-82.40419241993675%",
										"0;102.4014308546922,56.65288228870654%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;145.4914770123316"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/645.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/271.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/645.instance": "M671,461L631,488.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/645.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/380.instance": "M631,488.5L591,516"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"646": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						775.3763157856537,
						198.31559923915356
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;257.6236842143463,100%",
										"0;48.684400760846444,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/646.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/393.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/646.instance": "M953,251L993,251",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/646.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/451.instance": "M993,251L1033,251"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"647": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						775.3763157856537,
						198.31559923915356
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/647.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/390.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/647.instance": "M853,176L943,176",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/647.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/450.instance": "M943,176L1033,176"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"648": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						775.3763157856537,
						198.31559923915356
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;256.43058424180253,95.44799780350297%",
										"0;-1.133519151293683,-29.827499313594686%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-17.354024636261325"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/648.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/392.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/648.instance": "M953,226L993,213.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/648.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/454.instance": "M993,213.5L1033,201"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"649": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						775.3763157856537,
						198.31559923915356
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;176.43058424180253,-95.447997803503%",
										"0;6.502320672986571,-29.82749931359463%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-162.6459753637387"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/649.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/456.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/649.instance": "M1033,226L993,213.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/649.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/395.instance": "M993,213.5L953,201"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"650": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488.3157894736842,
						258.1842105263158
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;179.68421052631578,100%",
										"0;62.81578947368422,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/650.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/408.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/650.instance": "M588,325L628,325",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/650.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/224.instance": "M628,325L668,325"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"651": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488.3157894736842,
						258.1842105263158
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/651.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/405.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/651.instance": "M485,270L576.5,260",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/651.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/225.instance": "M576.5,260L668,250"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"652": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488.3157894736842,
						258.1842105263158
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;178.491110553772,95.44799780350297%",
										"0;12.997869561544121,-29.827499313594686%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-17.354024636261325"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/652.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/407.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/652.instance": "M588,300L628,287.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/652.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/230.instance": "M628,287.5L668,275"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"653": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488.3157894736842,
						258.1842105263158
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;98.49111055377199,-95.447997803503%",
										"0;20.633709385824346,-29.82749931359463%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-162.6459753637387"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/653.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/226.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/653.instance": "M668,300L628,287.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/653.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/410.instance": "M628,287.5L588,275"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"654": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						617.6315789473684,
						199.76315789473685
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;235.2764913175523,99.97358689864122%",
										"0;47.2378986293175,-2.298243376980257%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-1.3169124057932624"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/654.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/423.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/654.instance": "M766,253L809.5,252",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/654.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/391.instance": "M809.5,252L853,251"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"655": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						617.6315789473684,
						199.76315789473685
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/655.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/420.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/655.instance": "M666,178L759.5,177",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/655.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/390.instance": "M759.5,177L853,176"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"656": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						617.6315789473684,
						199.76315789473685
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;234.18282419314176,95.50641368112372%",
										"0;-2.5834144419818017,-29.639921487245292%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-17.241459398939977"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/656.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/422.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/656.instance": "M766,228L809.5,214.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/656.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/394.instance": "M809.5,214.5L853,201"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"657": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						617.6315789473684,
						199.76315789473685
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;147.34607260675978,-96.67860303352907%",
										"0;7.10398622660432,-25.558711146795048%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-165.1916229609576"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/657.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/396.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/657.instance": "M853,226L809.5,214.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/657.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/425.instance": "M809.5,214.5L766,203"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"658": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488.718111453553,
						289.2609287930267
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;176.4534614217008,70.71067811865476%",
										"0;32.910644082227066,-70.71067811865474%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-45"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/658.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/438.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/658.instance": "M588,405L628,365",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/658.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/224.instance": "M628,365L668,325"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"659": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488.718111453553,
						289.2609287930267
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/659.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/435.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/659.instance": "M485,350L576.5,300",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/659.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/225.instance": "M576.5,300L668,250"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"660": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488.718111453553,
						289.2609287930267
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;176.10016166631704,60.60432152628561%",
										"0;-16.685101654078153,-79.54317200324988%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-52.69605172201657"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/660.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/437.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/660.instance": "M588,380L628,327.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/660.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/230.instance": "M628,327.5L668,275"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"661": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						488.718111453553,
						289.2609287930267
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;101.54800383799528,-82.40419241993675%",
										"0;69.03523890377073,56.65288228870654%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;145.4914770123316"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/661.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/226.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/661.instance": "M668,300L628,327.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/661.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/440.instance": "M628,327.5L588,355"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"662": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						916.7710526275181,
						197.71126184989953
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;296.2289473724819,100%",
										"0;49.28873815010047,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/662.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/453.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/662.instance": "M1133,251L1173,251",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/662.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/239.instance": "M1173,251L1213,251"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"663": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						916.7710526275181,
						197.71126184989953
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/663.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/450.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/663.instance": "M1033,176L1123,176",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/663.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/240.instance": "M1123,176L1213,176"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"664": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						916.7710526275181,
						197.71126184989953
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;295.0358473999381,95.44799780350297%",
										"0;-0.5291817620396557,-29.827499313594686%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-17.354024636261325"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/664.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/452.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/664.instance": "M1133,226L1173,213.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/664.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/245.instance": "M1173,213.5L1213,201"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"665": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						916.7710526275181,
						197.71126184989953
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;215.03584739993812,-95.447997803503%",
										"0;7.106658062240598,-29.82749931359463%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-162.6459753637387"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/665.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/241.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/665.instance": "M1213,226L1173,213.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/665.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/455.instance": "M1173,213.5L1133,201"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"666": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						922.7105263157895,
						317.7894736842105
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;295.2894736842105,100%",
										"0;79.21052631578948,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/666.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/468.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/666.instance": "M1138,401L1178,401",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/666.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/254.instance": "M1178,401L1218,401"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"667": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						922.7105263157895,
						317.7894736842105
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/667.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/465.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/667.instance": "M1035,346L1126.5,336",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/667.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/255.instance": "M1126.5,336L1218,326"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"668": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						922.7105263157895,
						317.7894736842105
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;294.09637371166673,95.44799780350297%",
										"0;29.39260640364938,-29.827499313594686%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-17.354024636261325"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/668.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/467.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/668.instance": "M1138,376L1178,363.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/668.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/260.instance": "M1178,363.5L1218,351"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"669": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						922.7105263157895,
						317.7894736842105
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;214.09637371166673,-95.447997803503%",
										"0;37.02844622792958,-29.82749931359463%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-162.6459753637387"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/669.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/256.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/669.instance": "M1218,376L1178,363.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/669.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/470.instance": "M1178,363.5L1138,351"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"670": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						916.2969484769626,
						233.18143897394705
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;293.8746243982912,70.71067811865476%",
										"0;14.990133901306763,-70.71067811865474%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-45"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/670.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/483.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/670.instance": "M1133,331L1173,291",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/670.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/239.instance": "M1173,291L1213,251"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"671": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						916.2969484769626,
						233.18143897394705
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/671.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/480.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/671.instance": "M1030,276L1121.5,226",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/671.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/240.instance": "M1121.5,226L1213,176"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"672": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						916.2969484769626,
						233.18143897394705
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;293.5213246429074,60.60432152628561%",
										"0;-34.605611834998484,-79.54317200324988%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-52.69605172201657"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/672.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/482.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/672.instance": "M1133,306L1173,253.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/672.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/245.instance": "M1173,253.5L1213,201"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"673": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						916.2969484769626,
						233.18143897394705
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;218.96916681458572,-82.40419241993675%",
										"0;51.11472872285043,56.65288228870654%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;145.4914770123316"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/673.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/241.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/673.instance": "M1213,226L1173,253.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/673.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/485.instance": "M1173,253.5L1133,281"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"674": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						485.0263157894737,
						201.1578947368421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;180.9736842105263,100%",
										"0;47.84210526315789,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/674.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/498.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/674.instance": "M586,253L626,253",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/674.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/421.instance": "M626,253L666,253"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"675": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						485.0263157894737,
						201.1578947368421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/675.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/495.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/675.instance": "M483,198L574.5,188",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/675.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/420.instance": "M574.5,188L666,178"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"676": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						485.0263157894737,
						201.1578947368421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;179.7805842379825,95.44799780350297%",
										"0;-1.9758146489822366,-29.827499313594686%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-17.354024636261325"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/676.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/497.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/676.instance": "M586,228L626,215.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/676.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/424.instance": "M626,215.5L666,203"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"677": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						485.0263157894737,
						201.1578947368421
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;99.78058423798251,-95.447997803503%",
										"0;5.660025175298017,-29.82749931359463%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-162.6459753637387"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/677.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/426.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/677.instance": "M666,228L626,215.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/677.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/500.instance": "M626,215.5L586,203"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"678": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						923.7631578947369,
						443.8421052631579
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;295.2368421052631,100%",
										"0;112.15789473684208,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/678.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/513.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/678.instance": "M1139,560L1179,560",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/678.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/556.instance": "M1179,560L1219,560"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"679": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						923.7631578947369,
						443.8421052631579
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/679.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/510.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/679.instance": "M1036,505L1127.5,495",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/679.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/555.instance": "M1127.5,495L1219,485"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"680": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						923.7631578947369,
						443.8421052631579
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;294.04374213271933,95.44799780350297%",
										"0;62.33997482470198,-29.827499313594686%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-17.354024636261325"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/680.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/512.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/680.instance": "M1139,535L1179,522.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/680.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/559.instance": "M1179,522.5L1219,510"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"681": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						923.7631578947369,
						443.8421052631579
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;214.04374213271933,-95.447997803503%",
										"0;69.97581464898218,-29.82749931359463%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-162.6459753637387"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/681.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/561.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/681.instance": "M1219,535L1179,522.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/681.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/515.instance": "M1179,522.5L1139,510"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"682": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						489.5342105176163,
						384.920119618253
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;181.46578948238368,100%",
										"0;97.07988038174699,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/682.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/528.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/682.instance": "M591,486L631,486",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/682.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/269.instance": "M631,486L671,486"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"683": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						489.5342105176163,
						384.920119618253
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/683.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/525.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/683.instance": "M488,431L579.5,421",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/683.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/270.instance": "M579.5,421L671,411"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"684": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						489.5342105176163,
						384.920119618253
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;180.2726895098399,95.44799780350297%",
										"0;47.26196046960689,-29.827499313594686%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-17.354024636261325"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/684.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/527.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/684.instance": "M591,461L631,448.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/684.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/275.instance": "M631,448.5L671,436"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"685": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						489.5342105176163,
						384.920119618253
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;100.27268950983989,-95.447997803503%",
										"0;54.89780029388709,-29.82749931359463%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-162.6459753637387"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/685.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/271.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/685.instance": "M671,461L631,448.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/685.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/530.instance": "M631,448.5L591,436"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"686": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						920.2708133867146,
						351.2082934639626
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;294.90075948853917,70.71067811865476%",
										"0;46.96327941129118,-70.71067811865474%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-45"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/686.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/543.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/686.instance": "M1138,481L1178,441",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/686.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/254.instance": "M1178,441L1218,401"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"687": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						920.2708133867146,
						351.2082934639626
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/687.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/540.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/687.instance": "M1035,426L1126.5,376",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/687.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/255.instance": "M1126.5,376L1218,326"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"688": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						920.2708133867146,
						351.2082934639626
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;294.5474597331554,60.60432152628561%",
										"0;-2.632466325014036,-79.54317200324988%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-52.69605172201657"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/688.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/542.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/688.instance": "M1138,456L1178,403.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/688.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/260.instance": "M1178,403.5L1218,351"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"689": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						920.2708133867146,
						351.2082934639626
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;219.9953019048337,-82.40419241993675%",
										"0;83.08787423283485,56.65288228870654%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;145.4914770123316"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/689.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/256.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/689.instance": "M1218,376L1178,403.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/689.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/545.instance": "M1178,403.5L1138,431"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"690": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1011.6657548456293,
						499.4728531858087
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;385.6927864450555,91.19215051751064%",
										"0;20.87946079349092,-41.036467732879785%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-24.22774531795417"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/690.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/558.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/690.instance": "M1319,560L1359,542",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/690.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/198.instance": "M1359,542L1399,524"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"691": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1011.6657548456293,
						499.4728531858087
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/691.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/555.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/691.instance": "M1219,485L1309,467",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/691.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/DevsInstanceIcon/200.instance": "M1309,467L1399,449"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"692": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1011.6657548456293,
						499.4728531858087
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;384.9088745258882,79.52034847483463%",
										"0;-28.65366712480204,-60.6342657120614%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-37.32552048310607"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/692.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/557.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/692.instance": "M1319,535L1359,504.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/692.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/197.instance": "M1359,504.5L1399,474"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			},
			"693": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "- ",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "channelLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						1011.6657548456293,
						499.4728531858087
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;307.87911851628564,-99.06788398452959%",
										"0;14.489862173572533,13.621834047872786%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;172.1709234899404"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/ClassicDEVS/ClassicDEVS/channel/693.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/OutputPortIcon/199.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/693.instance": "M1399,499L1359,504.5",
						"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink/693.instance--/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/InputPortIcon/560.instance": "M1359,504.5L1319,510"
					}
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons/channelLink"
			}
		},
		"edges": [],
		"metamodels": [
			"/Formalisms/Railway/Railway.defaultIcons",
			"/Formalisms/TrainSchedule/TrainSchedule.defaultIcons",
			"/Formalisms/ClassicDEVS/ClassicDEVS.defaultIcons",
			"/Formalisms/GenericGraph/GenericGraph.defaultIcons"
		]
	},
	"asm": {
		"nodes": {
			"12": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 70
				},
				"name": {
					"type": "string",
					"value": "End1"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						1393,
						140
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Station"
			},
			"13": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 70
				},
				"name": {
					"type": "string",
					"value": "End2"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						1398,
						290
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Station"
			},
			"27": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						853,
						176
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"30": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						666,
						178
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"31": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"32": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 100
				},
				"outDirection": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						852,
						256
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Turnout"
			},
			"35": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 100
				},
				"inDirection": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						668,
						250
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Junction"
			},
			"36": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"40": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 70
				},
				"name": {
					"type": "string",
					"value": "Start1"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						126,
						142
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Station"
			},
			"43": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 70
				},
				"name": {
					"type": "string",
					"value": "Start2"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						128,
						294
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Station"
			},
			"50": {
				"train": {
					"type": "string",
					"value": "T1"
				},
				"IAT_min": {
					"type": "int",
					"value": "60"
				},
				"IAT_max": {
					"type": "int",
					"value": "600"
				},
				"a_min": {
					"type": "int",
					"value": "0.2"
				},
				"a_max": {
					"type": "int",
					"value": "0.7"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/Schedule"
			},
			"52": {
				"width": {
					"type": "int",
					"value": 60
				},
				"height": {
					"type": "int",
					"value": 25
				},
				"name": {
					"type": "string",
					"value": "T1"
				},
				"step": {
					"type": "int",
					"value": "1"
				},
				"position": {
					"type": "list<int>",
					"value": [
						133,
						816
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Train"
			},
			"53": {
				"width": {
					"type": "int",
					"value": 60
				},
				"height": {
					"type": "int",
					"value": 25
				},
				"name": {
					"type": "string",
					"value": "T2"
				},
				"step": {
					"type": "int",
					"value": "1"
				},
				"position": {
					"type": "list<int>",
					"value": [
						774,
						814
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Train"
			},
			"54": {
				"station": {
					"type": "string",
					"value": "Start1"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/Start"
			},
			"56": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule"
			},
			"58": {
				"station": {
					"type": "string",
					"value": "End1"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/End"
			},
			"59": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 100
				},
				"inDirection": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						671,
						411
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Junction"
			},
			"64": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 70
				},
				"name": {
					"type": "string",
					"value": "Start3"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						131,
						455
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Station"
			},
			"66": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 100
				},
				"outDirection": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						862,
						410
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Turnout"
			},
			"68": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"69": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 70
				},
				"name": {
					"type": "string",
					"value": "End3"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						1399,
						449
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Station"
			},
			"73": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule"
			},
			"74": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/Waypoint"
			},
			"75": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule"
			},
			"76": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/NextStep"
			},
			"77": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/NextStep"
			},
			"78": {
				"train": {
					"type": "string",
					"value": "T2"
				},
				"IAT_min": {
					"type": "int",
					"value": "60"
				},
				"IAT_max": {
					"type": "int",
					"value": "600"
				},
				"a_min": {
					"type": "int",
					"value": "0.2"
				},
				"a_max": {
					"type": "int",
					"value": "0.7"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/Schedule"
			},
			"79": {
				"station": {
					"type": "string",
					"value": "End2"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/End"
			},
			"80": {
				"station": {
					"type": "string",
					"value": "Start2"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/Start"
			},
			"81": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "TURN"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/Waypoint"
			},
			"83": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/NextStep"
			},
			"84": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule"
			},
			"85": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule"
			},
			"86": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule"
			},
			"87": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/Waypoint"
			},
			"88": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule"
			},
			"89": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/NextStep"
			},
			"90": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/NextStep"
			},
			"91": {
				"train": {
					"type": "string",
					"value": "T3"
				},
				"IAT_min": {
					"type": "int",
					"value": "60"
				},
				"IAT_max": {
					"type": "int",
					"value": "600"
				},
				"a_min": {
					"type": "int",
					"value": "0.2"
				},
				"a_max": {
					"type": "int",
					"value": "0.7"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/Schedule"
			},
			"92": {
				"station": {
					"type": "string",
					"value": "Start3"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/Start"
			},
			"93": {
				"station": {
					"type": "string",
					"value": "End3"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/End"
			},
			"94": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "TURN"
				},
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/Waypoint"
			},
			"95": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/NextStep"
			},
			"96": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/NextStep"
			},
			"97": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule"
			},
			"98": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule"
			},
			"99": {
				"$type": "/Formalisms/TrainSchedule/TrainSchedule/StepInSchedule"
			},
			"100": {
				"width": {
					"type": "int",
					"value": 60
				},
				"height": {
					"type": "int",
					"value": 25
				},
				"name": {
					"type": "string",
					"value": "T3"
				},
				"step": {
					"type": "int",
					"value": "1"
				},
				"position": {
					"type": "list<int>",
					"value": [
						121,
						1087
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Train"
			},
			"101": {
				"step": {
					"type": "int",
					"value": "1"
				},
				"$type": "/Formalisms/Railway/Railway/Clock"
			},
			"102": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						486,
						178
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"103": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"104": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 100
				},
				"outDirection": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						307,
						178
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Turnout"
			},
			"105": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"106": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"107": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						488,
						250
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"108": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"109": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "TURN"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"110": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						488,
						330
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"111": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "TURN"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"112": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 100
				},
				"outDirection": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						311,
						331
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Turnout"
			},
			"113": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"114": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"115": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						491,
						411
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"116": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"117": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "TURN"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"118": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						491,
						491
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"119": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						311,
						491
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"120": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "TURN"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"121": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"122": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"123": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 100
				},
				"inDirection": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						1213,
						176
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Junction"
			},
			"124": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"125": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						1033,
						176
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"126": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"127": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"128": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						1033,
						256
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"129": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "TURN"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"130": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"131": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 100
				},
				"inDirection": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						1218,
						326
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Junction"
			},
			"132": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"133": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						1038,
						326
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"134": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"135": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "TURN"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"136": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						1038,
						406
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"137": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "TURN"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"138": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"139": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						1219,
						485
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"140": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"141": {
				"width": {
					"type": "int",
					"value": 180
				},
				"height": {
					"type": "int",
					"value": 40
				},
				"length": {
					"type": "int",
					"value": 5000
				},
				"position": {
					"type": "list<int>",
					"value": [
						1039,
						485
					]
				},
				"highlight": {
					"type": "boolean",
					"value": false
				},
				"comment": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/Railway/Railway/Straight"
			},
			"142": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "STRAIGHT"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"143": {
				"direction": {
					"type": "ENUM(STRAIGHT,TURN)",
					"value": "TURN"
				},
				"$type": "/Formalisms/Railway/Railway/TrackToTrack"
			},
			"144": {
				"end_condition": {
					"type": "code",
					"value": "5000"
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/Simulation"
			},
			"145": {
				"select": {
					"type": "code",
					"value": "return imm[0]"
				},
				"name": {
					"type": "string",
					"value": "Railway"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"parameters": {
					"type": "list<$ARG>",
					"value": []
				},
				"__init__": {
					"type": "code",
					"value": ""
				},
				"position": {
					"type": "list<int>",
					"value": [
						50,
						200
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						4,
						2
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/CoupledDEVS"
			},
			"146": {
				"name": {
					"type": "string",
					"value": "g64"
				},
				"devs_type": {
					"type": "string",
					"value": "Generator"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"a_max": "0.7",
							"end": "End3",
							"schedule": [
								"TURN"
							],
							"a_min": "0.2",
							"IAT_max": "30",
							"IAT_min": "10",
							"start": "Start3",
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						131,
						455
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"147": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						381,
						530
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"148": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						231,
						505
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"149": {
				"name": {
					"type": "string",
					"value": "_64"
				},
				"devs_type": {
					"type": "string",
					"value": "PollQueue"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": []
				},
				"position": {
					"type": "list<int>",
					"value": [
						281,
						455
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"150": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						281,
						505
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"151": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						381,
						480
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"152": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						381,
						505
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"153": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"154": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"156": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"157": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"158": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"159": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"160": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"161": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"162": {
				"name": {
					"type": "string",
					"value": "g40"
				},
				"devs_type": {
					"type": "string",
					"value": "Generator"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"a_max": "0.7",
							"end": "End1",
							"schedule": [
								"STRAIGHT"
							],
							"a_min": "0.2",
							"IAT_max": "30",
							"IAT_min": "10",
							"start": "Start1",
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						126,
						142
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"163": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						376,
						217
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"164": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						226,
						192
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"165": {
				"name": {
					"type": "string",
					"value": "_40"
				},
				"devs_type": {
					"type": "string",
					"value": "PollQueue"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": []
				},
				"position": {
					"type": "list<int>",
					"value": [
						276,
						142
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"166": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						276,
						192
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"167": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						376,
						167
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"168": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						376,
						192
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"169": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"170": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"172": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"173": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"174": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"175": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"176": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"177": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"178": {
				"name": {
					"type": "string",
					"value": "g43"
				},
				"devs_type": {
					"type": "string",
					"value": "Generator"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"a_max": "0.7",
							"end": "End2",
							"schedule": [
								"TURN",
								"STRAIGHT"
							],
							"a_min": "0.2",
							"IAT_max": "30",
							"IAT_min": "10",
							"start": "Start2",
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						128,
						294
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"179": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						378,
						369
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"180": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						228,
						344
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"181": {
				"name": {
					"type": "string",
					"value": "_43"
				},
				"devs_type": {
					"type": "string",
					"value": "PollQueue"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": []
				},
				"position": {
					"type": "list<int>",
					"value": [
						278,
						294
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"182": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						278,
						344
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"183": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						378,
						319
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"184": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						378,
						344
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"185": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"186": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"188": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"189": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"190": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"191": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"192": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"193": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"194": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"195": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"196": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"197": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1399,
						474
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"198": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1399,
						524
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"199": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1399,
						499
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"200": {
				"name": {
					"type": "string",
					"value": "_69"
				},
				"devs_type": {
					"type": "string",
					"value": "Collector"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": []
				},
				"position": {
					"type": "list<int>",
					"value": [
						1399,
						449
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"201": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"202": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"203": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"204": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"205": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"206": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1398,
						315
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"207": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1398,
						365
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"208": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1398,
						340
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"209": {
				"name": {
					"type": "string",
					"value": "_13"
				},
				"devs_type": {
					"type": "string",
					"value": "Collector"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": []
				},
				"position": {
					"type": "list<int>",
					"value": [
						1398,
						290
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"210": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"211": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"212": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"213": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"214": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"215": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1393,
						165
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"216": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1393,
						215
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"217": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1393,
						190
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"218": {
				"name": {
					"type": "string",
					"value": "_12"
				},
				"devs_type": {
					"type": "string",
					"value": "Collector"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": []
				},
				"position": {
					"type": "list<int>",
					"value": [
						1393,
						140
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"219": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"220": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"221": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"222": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"223": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"224": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						668,
						325
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"225": {
				"name": {
					"type": "string",
					"value": "_35"
				},
				"devs_type": {
					"type": "string",
					"value": "Join"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						668,
						250
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"226": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						668,
						300
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"227": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						768,
						275
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"228": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						768,
						300
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"229": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						768,
						325
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"230": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						668,
						275
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"231": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"232": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"233": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"234": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"235": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"236": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"237": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"238": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"239": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1213,
						251
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"240": {
				"name": {
					"type": "string",
					"value": "_123"
				},
				"devs_type": {
					"type": "string",
					"value": "Join"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						1213,
						176
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"241": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1213,
						226
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"242": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1313,
						201
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"243": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1313,
						226
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"244": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1313,
						251
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"245": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1213,
						201
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"246": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"247": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"248": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"249": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"250": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"251": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"252": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"253": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"254": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1218,
						401
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"255": {
				"name": {
					"type": "string",
					"value": "_131"
				},
				"devs_type": {
					"type": "string",
					"value": "Join"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						1218,
						326
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"256": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1218,
						376
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"257": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1318,
						351
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"258": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1318,
						376
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"259": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1318,
						401
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"260": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1218,
						351
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"261": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"262": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"263": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"264": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"265": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"266": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"267": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"268": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"269": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						671,
						486
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"270": {
				"name": {
					"type": "string",
					"value": "_59"
				},
				"devs_type": {
					"type": "string",
					"value": "Join"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						671,
						411
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"271": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						671,
						461
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"272": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						771,
						436
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"273": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						771,
						461
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"274": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						771,
						486
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"275": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						671,
						436
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"276": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"277": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"278": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"279": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"280": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"281": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"282": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"283": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"284": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						852,
						281
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"285": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						952,
						322
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"286": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						852,
						306
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"287": {
				"name": {
					"type": "string",
					"value": "_32"
				},
				"devs_type": {
					"type": "string",
					"value": "Split"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						852,
						256
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"288": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						952,
						272
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"289": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						952,
						289
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"290": {
				"name": {
					"type": "string",
					"value": "train_out2"
				},
				"position": {
					"type": "list<int>",
					"value": [
						952,
						339
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"291": {
				"name": {
					"type": "string",
					"value": "Q_send2"
				},
				"position": {
					"type": "list<int>",
					"value": [
						952,
						305
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"292": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						852,
						331
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"293": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"294": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"295": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"296": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"297": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"298": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"299": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"300": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"301": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"302": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"303": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						311,
						356
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"304": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						411,
						397
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"305": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						311,
						381
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"306": {
				"name": {
					"type": "string",
					"value": "_112"
				},
				"devs_type": {
					"type": "string",
					"value": "Split"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						311,
						331
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"307": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						411,
						347
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"308": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						411,
						364
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"309": {
				"name": {
					"type": "string",
					"value": "train_out2"
				},
				"position": {
					"type": "list<int>",
					"value": [
						411,
						414
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"310": {
				"name": {
					"type": "string",
					"value": "Q_send2"
				},
				"position": {
					"type": "list<int>",
					"value": [
						411,
						380
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"311": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						311,
						406
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"312": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"313": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"314": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"315": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"316": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"317": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"318": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"319": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"320": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"321": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"322": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						862,
						435
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"323": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						962,
						476
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"324": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						862,
						460
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"325": {
				"name": {
					"type": "string",
					"value": "_66"
				},
				"devs_type": {
					"type": "string",
					"value": "Split"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						862,
						410
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"326": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						962,
						426
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"327": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						962,
						443
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"328": {
				"name": {
					"type": "string",
					"value": "train_out2"
				},
				"position": {
					"type": "list<int>",
					"value": [
						962,
						493
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"329": {
				"name": {
					"type": "string",
					"value": "Q_send2"
				},
				"position": {
					"type": "list<int>",
					"value": [
						962,
						459
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"330": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						862,
						485
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"331": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"332": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"333": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"334": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"335": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"336": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"337": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"338": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"339": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"340": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"341": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						307,
						203
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"342": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						407,
						244
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"343": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						307,
						228
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"344": {
				"name": {
					"type": "string",
					"value": "_104"
				},
				"devs_type": {
					"type": "string",
					"value": "Split"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						307,
						178
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"345": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						407,
						194
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"346": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						407,
						211
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"347": {
				"name": {
					"type": "string",
					"value": "train_out2"
				},
				"position": {
					"type": "list<int>",
					"value": [
						407,
						261
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"348": {
				"name": {
					"type": "string",
					"value": "Q_send2"
				},
				"position": {
					"type": "list<int>",
					"value": [
						407,
						227
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"349": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						307,
						253
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"350": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"351": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"352": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"353": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"354": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"355": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"356": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"357": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"358": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"359": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"360": {
				"name": {
					"type": "string",
					"value": "_119"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						311,
						491
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"361": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						311,
						566
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"362": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						411,
						541
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"363": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						411,
						566
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"364": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						311,
						516
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"365": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						411,
						516
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"366": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						311,
						541
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"367": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"368": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"369": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"370": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"371": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"372": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"373": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"374": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"375": {
				"name": {
					"type": "string",
					"value": "_118"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						491,
						491
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"376": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						491,
						566
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"377": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						591,
						541
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"378": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						591,
						566
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"379": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						491,
						516
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"380": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						591,
						516
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"381": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						491,
						541
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"382": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"383": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"384": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"385": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"386": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"387": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"388": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"389": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"390": {
				"name": {
					"type": "string",
					"value": "_27"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						853,
						176
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"391": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						853,
						251
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"392": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						953,
						226
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"393": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						953,
						251
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"394": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						853,
						201
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"395": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						953,
						201
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"396": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						853,
						226
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"397": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"398": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"399": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"400": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"401": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"402": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"403": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"404": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"405": {
				"name": {
					"type": "string",
					"value": "_107"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						485,
						270
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"406": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						485,
						345
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"407": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						588,
						300
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"408": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						588,
						325
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"409": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						488,
						275
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"410": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						588,
						275
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"411": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						488,
						300
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"412": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"413": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"414": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"415": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"416": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"418": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"419": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"420": {
				"name": {
					"type": "string",
					"value": "_30"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						666,
						178
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"421": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						666,
						253
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"422": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						766,
						228
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"423": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						766,
						253
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"424": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						666,
						203
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"425": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						766,
						203
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"426": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						666,
						228
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"427": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"428": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"429": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"430": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"431": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"432": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"433": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"434": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"435": {
				"name": {
					"type": "string",
					"value": "_110"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						485,
						350
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"436": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						485,
						425
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"437": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						588,
						380
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"438": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						588,
						405
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"439": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						488,
						355
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"440": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						588,
						355
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"441": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						488,
						380
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"442": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"443": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"444": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"445": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"446": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"448": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"449": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"450": {
				"name": {
					"type": "string",
					"value": "_125"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						1033,
						176
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"451": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1033,
						251
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"452": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1133,
						226
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"453": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1133,
						251
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"454": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1033,
						201
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"455": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1133,
						201
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"456": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1033,
						226
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"457": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"458": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"459": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"460": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"461": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"462": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"463": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"464": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"465": {
				"name": {
					"type": "string",
					"value": "_133"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						1035,
						346
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"466": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1035,
						421
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"467": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1138,
						376
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"468": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1138,
						401
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"469": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1038,
						351
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"470": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1138,
						351
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"471": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1038,
						376
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"472": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"473": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"474": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"475": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"476": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"478": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"479": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"480": {
				"name": {
					"type": "string",
					"value": "_128"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						1030,
						276
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"481": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1030,
						351
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"482": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1133,
						306
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"483": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1133,
						331
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"484": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1033,
						281
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"485": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1133,
						281
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"486": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1033,
						306
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"487": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"488": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"489": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"490": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"491": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"493": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"494": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"495": {
				"name": {
					"type": "string",
					"value": "_102"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						483,
						198
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"496": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						483,
						273
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"497": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						586,
						228
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"498": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						586,
						253
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"499": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						486,
						203
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"500": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						586,
						203
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"501": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						486,
						228
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"502": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"503": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"504": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"505": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"506": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"508": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"509": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"510": {
				"name": {
					"type": "string",
					"value": "_141"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						1036,
						505
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"511": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1036,
						580
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"512": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1139,
						535
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"513": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1139,
						560
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"514": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1039,
						510
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"515": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1139,
						510
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"516": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1039,
						535
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"517": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"518": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"519": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"520": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"521": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"523": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"524": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"525": {
				"name": {
					"type": "string",
					"value": "_115"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						488,
						431
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"526": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						488,
						506
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"527": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						591,
						461
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"528": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						591,
						486
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"529": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						491,
						436
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"530": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						591,
						436
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"531": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						491,
						461
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"532": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"533": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"534": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"535": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"536": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"538": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"539": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"540": {
				"name": {
					"type": "string",
					"value": "_136"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						1035,
						426
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"541": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1035,
						501
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"542": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1138,
						456
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"543": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1138,
						481
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"544": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1038,
						431
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"545": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1138,
						431
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"546": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1038,
						456
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"547": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"548": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"549": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"550": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"551": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"553": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"554": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"555": {
				"name": {
					"type": "string",
					"value": "_139"
				},
				"devs_type": {
					"type": "string",
					"value": "RailwaySegment"
				},
				"parameter_binding": {
					"type": "list<map<[name,val],[string,string]>>",
					"value": [
						{
							"length": 5000
						}
					]
				},
				"position": {
					"type": "list<int>",
					"value": [
						1219,
						485
					]
				},
				"scale": {
					"type": "list<int>",
					"value": [
						1,
						1
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance"
			},
			"556": {
				"name": {
					"type": "string",
					"value": "train_in"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1219,
						560
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"557": {
				"name": {
					"type": "string",
					"value": "Q_send"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1319,
						535
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"558": {
				"name": {
					"type": "string",
					"value": "train_out"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1319,
						560
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"559": {
				"name": {
					"type": "string",
					"value": "Q_recv"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1219,
						510
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"560": {
				"name": {
					"type": "string",
					"value": "Q_rack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1319,
						510
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/InputPort"
			},
			"561": {
				"name": {
					"type": "string",
					"value": "Q_sack"
				},
				"position": {
					"type": "list<int>",
					"value": [
						1219,
						535
					]
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/OutputPort"
			},
			"562": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"563": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"564": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"565": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"566": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/submodels"
			},
			"567": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"568": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"569": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"570": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"571": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"572": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"573": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"574": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"575": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"576": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"577": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"578": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"579": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"580": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"581": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"582": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"583": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"584": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"585": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"586": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"587": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"588": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"589": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"590": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"591": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"592": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"593": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"594": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"595": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"596": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"597": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"598": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"599": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"600": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"601": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"602": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"603": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"604": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"605": {
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/ports"
			},
			"606": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"607": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"608": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"609": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"610": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"611": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"612": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"613": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"614": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"615": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"616": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"617": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"618": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"619": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"620": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"621": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"622": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"623": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"624": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"625": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"626": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"627": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"628": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"629": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"630": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"631": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"632": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"633": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"634": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"635": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"636": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"637": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"638": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"639": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"640": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"641": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"642": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"643": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"644": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"645": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"646": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"647": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"648": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"649": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"650": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"651": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"652": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"653": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"654": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"655": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"656": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"657": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"658": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"659": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"660": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"661": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"662": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"663": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"664": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"665": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"666": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"667": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"668": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"669": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"670": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"671": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"672": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"673": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"674": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"675": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"676": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"677": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"678": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"679": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"680": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"681": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"682": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"683": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"684": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"685": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"686": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"687": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"688": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"689": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"690": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"691": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"692": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			},
			"693": {
				"transfer_function": {
					"type": "code",
					"value": ""
				},
				"$type": "/Formalisms/ClassicDEVS/ClassicDEVS/channel"
			}
		},
		"edges": [
			{
				"src": "30",
				"dest": "31"
			},
			{
				"src": "31",
				"dest": "27"
			},
			{
				"src": "35",
				"dest": "36"
			},
			{
				"src": "36",
				"dest": "32"
			},
			{
				"src": "50",
				"dest": "56"
			},
			{
				"src": "56",
				"dest": "54"
			},
			{
				"src": "59",
				"dest": "68"
			},
			{
				"src": "68",
				"dest": "66"
			},
			{
				"src": "50",
				"dest": "73"
			},
			{
				"src": "73",
				"dest": "58"
			},
			{
				"src": "50",
				"dest": "75"
			},
			{
				"src": "75",
				"dest": "74"
			},
			{
				"src": "54",
				"dest": "76"
			},
			{
				"src": "76",
				"dest": "74"
			},
			{
				"src": "74",
				"dest": "77"
			},
			{
				"src": "77",
				"dest": "58"
			},
			{
				"src": "80",
				"dest": "83"
			},
			{
				"src": "83",
				"dest": "81"
			},
			{
				"src": "78",
				"dest": "84"
			},
			{
				"src": "84",
				"dest": "81"
			},
			{
				"src": "78",
				"dest": "85"
			},
			{
				"src": "85",
				"dest": "79"
			},
			{
				"src": "78",
				"dest": "86"
			},
			{
				"src": "86",
				"dest": "80"
			},
			{
				"src": "78",
				"dest": "88"
			},
			{
				"src": "88",
				"dest": "87"
			},
			{
				"src": "81",
				"dest": "89"
			},
			{
				"src": "89",
				"dest": "87"
			},
			{
				"src": "87",
				"dest": "90"
			},
			{
				"src": "90",
				"dest": "79"
			},
			{
				"src": "94",
				"dest": "95"
			},
			{
				"src": "95",
				"dest": "93"
			},
			{
				"src": "92",
				"dest": "96"
			},
			{
				"src": "96",
				"dest": "94"
			},
			{
				"src": "91",
				"dest": "97"
			},
			{
				"src": "97",
				"dest": "94"
			},
			{
				"src": "91",
				"dest": "98"
			},
			{
				"src": "98",
				"dest": "93"
			},
			{
				"src": "91",
				"dest": "99"
			},
			{
				"src": "99",
				"dest": "92"
			},
			{
				"src": "102",
				"dest": "103"
			},
			{
				"src": "103",
				"dest": "30"
			},
			{
				"src": "104",
				"dest": "105"
			},
			{
				"src": "105",
				"dest": "102"
			},
			{
				"src": "40",
				"dest": "106"
			},
			{
				"src": "106",
				"dest": "104"
			},
			{
				"src": "107",
				"dest": "108"
			},
			{
				"src": "108",
				"dest": "35"
			},
			{
				"src": "104",
				"dest": "109"
			},
			{
				"src": "109",
				"dest": "107"
			},
			{
				"src": "110",
				"dest": "111"
			},
			{
				"src": "111",
				"dest": "35"
			},
			{
				"src": "112",
				"dest": "113"
			},
			{
				"src": "113",
				"dest": "110"
			},
			{
				"src": "43",
				"dest": "114"
			},
			{
				"src": "114",
				"dest": "112"
			},
			{
				"src": "115",
				"dest": "116"
			},
			{
				"src": "116",
				"dest": "59"
			},
			{
				"src": "112",
				"dest": "117"
			},
			{
				"src": "117",
				"dest": "115"
			},
			{
				"src": "118",
				"dest": "120"
			},
			{
				"src": "120",
				"dest": "59"
			},
			{
				"src": "119",
				"dest": "121"
			},
			{
				"src": "121",
				"dest": "118"
			},
			{
				"src": "64",
				"dest": "122"
			},
			{
				"src": "122",
				"dest": "119"
			},
			{
				"src": "123",
				"dest": "124"
			},
			{
				"src": "124",
				"dest": "12"
			},
			{
				"src": "125",
				"dest": "126"
			},
			{
				"src": "126",
				"dest": "123"
			},
			{
				"src": "27",
				"dest": "127"
			},
			{
				"src": "127",
				"dest": "125"
			},
			{
				"src": "128",
				"dest": "129"
			},
			{
				"src": "129",
				"dest": "123"
			},
			{
				"src": "32",
				"dest": "130"
			},
			{
				"src": "130",
				"dest": "128"
			},
			{
				"src": "131",
				"dest": "132"
			},
			{
				"src": "132",
				"dest": "13"
			},
			{
				"src": "133",
				"dest": "134"
			},
			{
				"src": "134",
				"dest": "131"
			},
			{
				"src": "32",
				"dest": "135"
			},
			{
				"src": "135",
				"dest": "133"
			},
			{
				"src": "136",
				"dest": "137"
			},
			{
				"src": "137",
				"dest": "131"
			},
			{
				"src": "66",
				"dest": "138"
			},
			{
				"src": "138",
				"dest": "136"
			},
			{
				"src": "139",
				"dest": "140"
			},
			{
				"src": "140",
				"dest": "69"
			},
			{
				"src": "141",
				"dest": "142"
			},
			{
				"src": "142",
				"dest": "139"
			},
			{
				"src": "66",
				"dest": "143"
			},
			{
				"src": "143",
				"dest": "141"
			},
			{
				"src": "149",
				"dest": "153"
			},
			{
				"src": "153",
				"dest": "147"
			},
			{
				"src": "149",
				"dest": "154"
			},
			{
				"src": "154",
				"dest": "151"
			},
			{
				"src": "145",
				"dest": "156"
			},
			{
				"src": "156",
				"dest": "146"
			},
			{
				"src": "145",
				"dest": "157"
			},
			{
				"src": "157",
				"dest": "149"
			},
			{
				"src": "64",
				"dest": "158"
			},
			{
				"src": "158",
				"dest": "149"
			},
			{
				"src": "146",
				"dest": "159"
			},
			{
				"src": "159",
				"dest": "148"
			},
			{
				"src": "149",
				"dest": "160"
			},
			{
				"src": "160",
				"dest": "150"
			},
			{
				"src": "149",
				"dest": "161"
			},
			{
				"src": "161",
				"dest": "152"
			},
			{
				"src": "165",
				"dest": "169"
			},
			{
				"src": "169",
				"dest": "163"
			},
			{
				"src": "165",
				"dest": "170"
			},
			{
				"src": "170",
				"dest": "167"
			},
			{
				"src": "145",
				"dest": "172"
			},
			{
				"src": "172",
				"dest": "162"
			},
			{
				"src": "145",
				"dest": "173"
			},
			{
				"src": "173",
				"dest": "165"
			},
			{
				"src": "40",
				"dest": "174"
			},
			{
				"src": "174",
				"dest": "165"
			},
			{
				"src": "162",
				"dest": "175"
			},
			{
				"src": "175",
				"dest": "164"
			},
			{
				"src": "165",
				"dest": "176"
			},
			{
				"src": "176",
				"dest": "166"
			},
			{
				"src": "165",
				"dest": "177"
			},
			{
				"src": "177",
				"dest": "168"
			},
			{
				"src": "181",
				"dest": "185"
			},
			{
				"src": "185",
				"dest": "179"
			},
			{
				"src": "181",
				"dest": "186"
			},
			{
				"src": "186",
				"dest": "183"
			},
			{
				"src": "145",
				"dest": "188"
			},
			{
				"src": "188",
				"dest": "178"
			},
			{
				"src": "145",
				"dest": "189"
			},
			{
				"src": "189",
				"dest": "181"
			},
			{
				"src": "43",
				"dest": "190"
			},
			{
				"src": "190",
				"dest": "181"
			},
			{
				"src": "178",
				"dest": "191"
			},
			{
				"src": "191",
				"dest": "180"
			},
			{
				"src": "181",
				"dest": "192"
			},
			{
				"src": "192",
				"dest": "182"
			},
			{
				"src": "181",
				"dest": "193"
			},
			{
				"src": "193",
				"dest": "184"
			},
			{
				"src": "164",
				"dest": "194"
			},
			{
				"src": "194",
				"dest": "166"
			},
			{
				"src": "148",
				"dest": "195"
			},
			{
				"src": "195",
				"dest": "150"
			},
			{
				"src": "180",
				"dest": "196"
			},
			{
				"src": "196",
				"dest": "182"
			},
			{
				"src": "145",
				"dest": "201"
			},
			{
				"src": "201",
				"dest": "200"
			},
			{
				"src": "69",
				"dest": "202"
			},
			{
				"src": "202",
				"dest": "200"
			},
			{
				"src": "200",
				"dest": "203"
			},
			{
				"src": "203",
				"dest": "197"
			},
			{
				"src": "200",
				"dest": "204"
			},
			{
				"src": "204",
				"dest": "198"
			},
			{
				"src": "200",
				"dest": "205"
			},
			{
				"src": "205",
				"dest": "199"
			},
			{
				"src": "145",
				"dest": "210"
			},
			{
				"src": "210",
				"dest": "209"
			},
			{
				"src": "13",
				"dest": "211"
			},
			{
				"src": "211",
				"dest": "209"
			},
			{
				"src": "209",
				"dest": "212"
			},
			{
				"src": "212",
				"dest": "206"
			},
			{
				"src": "209",
				"dest": "213"
			},
			{
				"src": "213",
				"dest": "207"
			},
			{
				"src": "209",
				"dest": "214"
			},
			{
				"src": "214",
				"dest": "208"
			},
			{
				"src": "145",
				"dest": "219"
			},
			{
				"src": "219",
				"dest": "218"
			},
			{
				"src": "12",
				"dest": "220"
			},
			{
				"src": "220",
				"dest": "218"
			},
			{
				"src": "218",
				"dest": "221"
			},
			{
				"src": "221",
				"dest": "215"
			},
			{
				"src": "218",
				"dest": "222"
			},
			{
				"src": "222",
				"dest": "216"
			},
			{
				"src": "218",
				"dest": "223"
			},
			{
				"src": "223",
				"dest": "217"
			},
			{
				"src": "225",
				"dest": "231"
			},
			{
				"src": "231",
				"dest": "228"
			},
			{
				"src": "225",
				"dest": "232"
			},
			{
				"src": "232",
				"dest": "224"
			},
			{
				"src": "225",
				"dest": "233"
			},
			{
				"src": "233",
				"dest": "229"
			},
			{
				"src": "225",
				"dest": "234"
			},
			{
				"src": "234",
				"dest": "227"
			},
			{
				"src": "225",
				"dest": "235"
			},
			{
				"src": "235",
				"dest": "226"
			},
			{
				"src": "225",
				"dest": "236"
			},
			{
				"src": "236",
				"dest": "230"
			},
			{
				"src": "35",
				"dest": "237"
			},
			{
				"src": "237",
				"dest": "225"
			},
			{
				"src": "145",
				"dest": "238"
			},
			{
				"src": "238",
				"dest": "225"
			},
			{
				"src": "240",
				"dest": "246"
			},
			{
				"src": "246",
				"dest": "243"
			},
			{
				"src": "240",
				"dest": "247"
			},
			{
				"src": "247",
				"dest": "239"
			},
			{
				"src": "240",
				"dest": "248"
			},
			{
				"src": "248",
				"dest": "244"
			},
			{
				"src": "240",
				"dest": "249"
			},
			{
				"src": "249",
				"dest": "242"
			},
			{
				"src": "240",
				"dest": "250"
			},
			{
				"src": "250",
				"dest": "241"
			},
			{
				"src": "240",
				"dest": "251"
			},
			{
				"src": "251",
				"dest": "245"
			},
			{
				"src": "123",
				"dest": "252"
			},
			{
				"src": "252",
				"dest": "240"
			},
			{
				"src": "145",
				"dest": "253"
			},
			{
				"src": "253",
				"dest": "240"
			},
			{
				"src": "255",
				"dest": "261"
			},
			{
				"src": "261",
				"dest": "258"
			},
			{
				"src": "255",
				"dest": "262"
			},
			{
				"src": "262",
				"dest": "254"
			},
			{
				"src": "255",
				"dest": "263"
			},
			{
				"src": "263",
				"dest": "259"
			},
			{
				"src": "255",
				"dest": "264"
			},
			{
				"src": "264",
				"dest": "257"
			},
			{
				"src": "255",
				"dest": "265"
			},
			{
				"src": "265",
				"dest": "256"
			},
			{
				"src": "255",
				"dest": "266"
			},
			{
				"src": "266",
				"dest": "260"
			},
			{
				"src": "131",
				"dest": "267"
			},
			{
				"src": "267",
				"dest": "255"
			},
			{
				"src": "145",
				"dest": "268"
			},
			{
				"src": "268",
				"dest": "255"
			},
			{
				"src": "270",
				"dest": "276"
			},
			{
				"src": "276",
				"dest": "273"
			},
			{
				"src": "270",
				"dest": "277"
			},
			{
				"src": "277",
				"dest": "269"
			},
			{
				"src": "270",
				"dest": "278"
			},
			{
				"src": "278",
				"dest": "274"
			},
			{
				"src": "270",
				"dest": "279"
			},
			{
				"src": "279",
				"dest": "272"
			},
			{
				"src": "270",
				"dest": "280"
			},
			{
				"src": "280",
				"dest": "271"
			},
			{
				"src": "270",
				"dest": "281"
			},
			{
				"src": "281",
				"dest": "275"
			},
			{
				"src": "59",
				"dest": "282"
			},
			{
				"src": "282",
				"dest": "270"
			},
			{
				"src": "145",
				"dest": "283"
			},
			{
				"src": "283",
				"dest": "270"
			},
			{
				"src": "287",
				"dest": "293"
			},
			{
				"src": "293",
				"dest": "285"
			},
			{
				"src": "287",
				"dest": "294"
			},
			{
				"src": "294",
				"dest": "288"
			},
			{
				"src": "287",
				"dest": "295"
			},
			{
				"src": "295",
				"dest": "286"
			},
			{
				"src": "287",
				"dest": "296"
			},
			{
				"src": "296",
				"dest": "284"
			},
			{
				"src": "287",
				"dest": "297"
			},
			{
				"src": "297",
				"dest": "289"
			},
			{
				"src": "32",
				"dest": "298"
			},
			{
				"src": "298",
				"dest": "287"
			},
			{
				"src": "287",
				"dest": "299"
			},
			{
				"src": "299",
				"dest": "290"
			},
			{
				"src": "287",
				"dest": "300"
			},
			{
				"src": "300",
				"dest": "292"
			},
			{
				"src": "145",
				"dest": "301"
			},
			{
				"src": "301",
				"dest": "287"
			},
			{
				"src": "287",
				"dest": "302"
			},
			{
				"src": "302",
				"dest": "291"
			},
			{
				"src": "306",
				"dest": "312"
			},
			{
				"src": "312",
				"dest": "304"
			},
			{
				"src": "306",
				"dest": "313"
			},
			{
				"src": "313",
				"dest": "307"
			},
			{
				"src": "306",
				"dest": "314"
			},
			{
				"src": "314",
				"dest": "305"
			},
			{
				"src": "306",
				"dest": "315"
			},
			{
				"src": "315",
				"dest": "303"
			},
			{
				"src": "306",
				"dest": "316"
			},
			{
				"src": "316",
				"dest": "308"
			},
			{
				"src": "112",
				"dest": "317"
			},
			{
				"src": "317",
				"dest": "306"
			},
			{
				"src": "306",
				"dest": "318"
			},
			{
				"src": "318",
				"dest": "309"
			},
			{
				"src": "306",
				"dest": "319"
			},
			{
				"src": "319",
				"dest": "311"
			},
			{
				"src": "145",
				"dest": "320"
			},
			{
				"src": "320",
				"dest": "306"
			},
			{
				"src": "306",
				"dest": "321"
			},
			{
				"src": "321",
				"dest": "310"
			},
			{
				"src": "325",
				"dest": "331"
			},
			{
				"src": "331",
				"dest": "323"
			},
			{
				"src": "325",
				"dest": "332"
			},
			{
				"src": "332",
				"dest": "326"
			},
			{
				"src": "325",
				"dest": "333"
			},
			{
				"src": "333",
				"dest": "324"
			},
			{
				"src": "325",
				"dest": "334"
			},
			{
				"src": "334",
				"dest": "322"
			},
			{
				"src": "325",
				"dest": "335"
			},
			{
				"src": "335",
				"dest": "327"
			},
			{
				"src": "66",
				"dest": "336"
			},
			{
				"src": "336",
				"dest": "325"
			},
			{
				"src": "325",
				"dest": "337"
			},
			{
				"src": "337",
				"dest": "328"
			},
			{
				"src": "325",
				"dest": "338"
			},
			{
				"src": "338",
				"dest": "330"
			},
			{
				"src": "145",
				"dest": "339"
			},
			{
				"src": "339",
				"dest": "325"
			},
			{
				"src": "325",
				"dest": "340"
			},
			{
				"src": "340",
				"dest": "329"
			},
			{
				"src": "344",
				"dest": "350"
			},
			{
				"src": "350",
				"dest": "342"
			},
			{
				"src": "344",
				"dest": "351"
			},
			{
				"src": "351",
				"dest": "345"
			},
			{
				"src": "344",
				"dest": "352"
			},
			{
				"src": "352",
				"dest": "343"
			},
			{
				"src": "344",
				"dest": "353"
			},
			{
				"src": "353",
				"dest": "341"
			},
			{
				"src": "344",
				"dest": "354"
			},
			{
				"src": "354",
				"dest": "346"
			},
			{
				"src": "104",
				"dest": "355"
			},
			{
				"src": "355",
				"dest": "344"
			},
			{
				"src": "344",
				"dest": "356"
			},
			{
				"src": "356",
				"dest": "347"
			},
			{
				"src": "344",
				"dest": "357"
			},
			{
				"src": "357",
				"dest": "349"
			},
			{
				"src": "145",
				"dest": "358"
			},
			{
				"src": "358",
				"dest": "344"
			},
			{
				"src": "344",
				"dest": "359"
			},
			{
				"src": "359",
				"dest": "348"
			},
			{
				"src": "119",
				"dest": "367"
			},
			{
				"src": "367",
				"dest": "360"
			},
			{
				"src": "360",
				"dest": "368"
			},
			{
				"src": "368",
				"dest": "365"
			},
			{
				"src": "360",
				"dest": "369"
			},
			{
				"src": "369",
				"dest": "363"
			},
			{
				"src": "360",
				"dest": "370"
			},
			{
				"src": "370",
				"dest": "364"
			},
			{
				"src": "145",
				"dest": "371"
			},
			{
				"src": "371",
				"dest": "360"
			},
			{
				"src": "360",
				"dest": "372"
			},
			{
				"src": "372",
				"dest": "361"
			},
			{
				"src": "360",
				"dest": "373"
			},
			{
				"src": "373",
				"dest": "362"
			},
			{
				"src": "360",
				"dest": "374"
			},
			{
				"src": "374",
				"dest": "366"
			},
			{
				"src": "118",
				"dest": "382"
			},
			{
				"src": "382",
				"dest": "375"
			},
			{
				"src": "375",
				"dest": "383"
			},
			{
				"src": "383",
				"dest": "380"
			},
			{
				"src": "375",
				"dest": "384"
			},
			{
				"src": "384",
				"dest": "378"
			},
			{
				"src": "375",
				"dest": "385"
			},
			{
				"src": "385",
				"dest": "379"
			},
			{
				"src": "145",
				"dest": "386"
			},
			{
				"src": "386",
				"dest": "375"
			},
			{
				"src": "375",
				"dest": "387"
			},
			{
				"src": "387",
				"dest": "376"
			},
			{
				"src": "375",
				"dest": "388"
			},
			{
				"src": "388",
				"dest": "377"
			},
			{
				"src": "375",
				"dest": "389"
			},
			{
				"src": "389",
				"dest": "381"
			},
			{
				"src": "27",
				"dest": "397"
			},
			{
				"src": "397",
				"dest": "390"
			},
			{
				"src": "390",
				"dest": "398"
			},
			{
				"src": "398",
				"dest": "395"
			},
			{
				"src": "390",
				"dest": "399"
			},
			{
				"src": "399",
				"dest": "393"
			},
			{
				"src": "390",
				"dest": "400"
			},
			{
				"src": "400",
				"dest": "394"
			},
			{
				"src": "145",
				"dest": "401"
			},
			{
				"src": "401",
				"dest": "390"
			},
			{
				"src": "390",
				"dest": "402"
			},
			{
				"src": "402",
				"dest": "391"
			},
			{
				"src": "390",
				"dest": "403"
			},
			{
				"src": "403",
				"dest": "392"
			},
			{
				"src": "390",
				"dest": "404"
			},
			{
				"src": "404",
				"dest": "396"
			},
			{
				"src": "107",
				"dest": "412"
			},
			{
				"src": "412",
				"dest": "405"
			},
			{
				"src": "405",
				"dest": "413"
			},
			{
				"src": "413",
				"dest": "410"
			},
			{
				"src": "405",
				"dest": "414"
			},
			{
				"src": "414",
				"dest": "408"
			},
			{
				"src": "405",
				"dest": "415"
			},
			{
				"src": "415",
				"dest": "409"
			},
			{
				"src": "145",
				"dest": "416"
			},
			{
				"src": "416",
				"dest": "405"
			},
			{
				"src": "405",
				"dest": "418"
			},
			{
				"src": "418",
				"dest": "407"
			},
			{
				"src": "405",
				"dest": "419"
			},
			{
				"src": "419",
				"dest": "411"
			},
			{
				"src": "30",
				"dest": "427"
			},
			{
				"src": "427",
				"dest": "420"
			},
			{
				"src": "420",
				"dest": "428"
			},
			{
				"src": "428",
				"dest": "425"
			},
			{
				"src": "420",
				"dest": "429"
			},
			{
				"src": "429",
				"dest": "423"
			},
			{
				"src": "420",
				"dest": "430"
			},
			{
				"src": "430",
				"dest": "424"
			},
			{
				"src": "145",
				"dest": "431"
			},
			{
				"src": "431",
				"dest": "420"
			},
			{
				"src": "420",
				"dest": "432"
			},
			{
				"src": "432",
				"dest": "421"
			},
			{
				"src": "420",
				"dest": "433"
			},
			{
				"src": "433",
				"dest": "422"
			},
			{
				"src": "420",
				"dest": "434"
			},
			{
				"src": "434",
				"dest": "426"
			},
			{
				"src": "110",
				"dest": "442"
			},
			{
				"src": "442",
				"dest": "435"
			},
			{
				"src": "435",
				"dest": "443"
			},
			{
				"src": "443",
				"dest": "440"
			},
			{
				"src": "435",
				"dest": "444"
			},
			{
				"src": "444",
				"dest": "438"
			},
			{
				"src": "435",
				"dest": "445"
			},
			{
				"src": "445",
				"dest": "439"
			},
			{
				"src": "145",
				"dest": "446"
			},
			{
				"src": "446",
				"dest": "435"
			},
			{
				"src": "435",
				"dest": "448"
			},
			{
				"src": "448",
				"dest": "437"
			},
			{
				"src": "435",
				"dest": "449"
			},
			{
				"src": "449",
				"dest": "441"
			},
			{
				"src": "125",
				"dest": "457"
			},
			{
				"src": "457",
				"dest": "450"
			},
			{
				"src": "450",
				"dest": "458"
			},
			{
				"src": "458",
				"dest": "455"
			},
			{
				"src": "450",
				"dest": "459"
			},
			{
				"src": "459",
				"dest": "453"
			},
			{
				"src": "450",
				"dest": "460"
			},
			{
				"src": "460",
				"dest": "454"
			},
			{
				"src": "145",
				"dest": "461"
			},
			{
				"src": "461",
				"dest": "450"
			},
			{
				"src": "450",
				"dest": "462"
			},
			{
				"src": "462",
				"dest": "451"
			},
			{
				"src": "450",
				"dest": "463"
			},
			{
				"src": "463",
				"dest": "452"
			},
			{
				"src": "450",
				"dest": "464"
			},
			{
				"src": "464",
				"dest": "456"
			},
			{
				"src": "133",
				"dest": "472"
			},
			{
				"src": "472",
				"dest": "465"
			},
			{
				"src": "465",
				"dest": "473"
			},
			{
				"src": "473",
				"dest": "470"
			},
			{
				"src": "465",
				"dest": "474"
			},
			{
				"src": "474",
				"dest": "468"
			},
			{
				"src": "465",
				"dest": "475"
			},
			{
				"src": "475",
				"dest": "469"
			},
			{
				"src": "145",
				"dest": "476"
			},
			{
				"src": "476",
				"dest": "465"
			},
			{
				"src": "465",
				"dest": "478"
			},
			{
				"src": "478",
				"dest": "467"
			},
			{
				"src": "465",
				"dest": "479"
			},
			{
				"src": "479",
				"dest": "471"
			},
			{
				"src": "128",
				"dest": "487"
			},
			{
				"src": "487",
				"dest": "480"
			},
			{
				"src": "480",
				"dest": "488"
			},
			{
				"src": "488",
				"dest": "485"
			},
			{
				"src": "480",
				"dest": "489"
			},
			{
				"src": "489",
				"dest": "483"
			},
			{
				"src": "480",
				"dest": "490"
			},
			{
				"src": "490",
				"dest": "484"
			},
			{
				"src": "145",
				"dest": "491"
			},
			{
				"src": "491",
				"dest": "480"
			},
			{
				"src": "480",
				"dest": "493"
			},
			{
				"src": "493",
				"dest": "482"
			},
			{
				"src": "480",
				"dest": "494"
			},
			{
				"src": "494",
				"dest": "486"
			},
			{
				"src": "102",
				"dest": "502"
			},
			{
				"src": "502",
				"dest": "495"
			},
			{
				"src": "495",
				"dest": "503"
			},
			{
				"src": "503",
				"dest": "500"
			},
			{
				"src": "495",
				"dest": "504"
			},
			{
				"src": "504",
				"dest": "498"
			},
			{
				"src": "495",
				"dest": "505"
			},
			{
				"src": "505",
				"dest": "499"
			},
			{
				"src": "145",
				"dest": "506"
			},
			{
				"src": "506",
				"dest": "495"
			},
			{
				"src": "495",
				"dest": "508"
			},
			{
				"src": "508",
				"dest": "497"
			},
			{
				"src": "495",
				"dest": "509"
			},
			{
				"src": "509",
				"dest": "501"
			},
			{
				"src": "141",
				"dest": "517"
			},
			{
				"src": "517",
				"dest": "510"
			},
			{
				"src": "510",
				"dest": "518"
			},
			{
				"src": "518",
				"dest": "515"
			},
			{
				"src": "510",
				"dest": "519"
			},
			{
				"src": "519",
				"dest": "513"
			},
			{
				"src": "510",
				"dest": "520"
			},
			{
				"src": "520",
				"dest": "514"
			},
			{
				"src": "145",
				"dest": "521"
			},
			{
				"src": "521",
				"dest": "510"
			},
			{
				"src": "510",
				"dest": "523"
			},
			{
				"src": "523",
				"dest": "512"
			},
			{
				"src": "510",
				"dest": "524"
			},
			{
				"src": "524",
				"dest": "516"
			},
			{
				"src": "115",
				"dest": "532"
			},
			{
				"src": "532",
				"dest": "525"
			},
			{
				"src": "525",
				"dest": "533"
			},
			{
				"src": "533",
				"dest": "530"
			},
			{
				"src": "525",
				"dest": "534"
			},
			{
				"src": "534",
				"dest": "528"
			},
			{
				"src": "525",
				"dest": "535"
			},
			{
				"src": "535",
				"dest": "529"
			},
			{
				"src": "145",
				"dest": "536"
			},
			{
				"src": "536",
				"dest": "525"
			},
			{
				"src": "525",
				"dest": "538"
			},
			{
				"src": "538",
				"dest": "527"
			},
			{
				"src": "525",
				"dest": "539"
			},
			{
				"src": "539",
				"dest": "531"
			},
			{
				"src": "136",
				"dest": "547"
			},
			{
				"src": "547",
				"dest": "540"
			},
			{
				"src": "540",
				"dest": "548"
			},
			{
				"src": "548",
				"dest": "545"
			},
			{
				"src": "540",
				"dest": "549"
			},
			{
				"src": "549",
				"dest": "543"
			},
			{
				"src": "540",
				"dest": "550"
			},
			{
				"src": "550",
				"dest": "544"
			},
			{
				"src": "145",
				"dest": "551"
			},
			{
				"src": "551",
				"dest": "540"
			},
			{
				"src": "540",
				"dest": "553"
			},
			{
				"src": "553",
				"dest": "542"
			},
			{
				"src": "540",
				"dest": "554"
			},
			{
				"src": "554",
				"dest": "546"
			},
			{
				"src": "139",
				"dest": "562"
			},
			{
				"src": "562",
				"dest": "555"
			},
			{
				"src": "555",
				"dest": "563"
			},
			{
				"src": "563",
				"dest": "560"
			},
			{
				"src": "555",
				"dest": "564"
			},
			{
				"src": "564",
				"dest": "558"
			},
			{
				"src": "555",
				"dest": "565"
			},
			{
				"src": "565",
				"dest": "559"
			},
			{
				"src": "145",
				"dest": "566"
			},
			{
				"src": "566",
				"dest": "555"
			},
			{
				"src": "555",
				"dest": "567"
			},
			{
				"src": "567",
				"dest": "556"
			},
			{
				"src": "555",
				"dest": "568"
			},
			{
				"src": "568",
				"dest": "557"
			},
			{
				"src": "555",
				"dest": "569"
			},
			{
				"src": "569",
				"dest": "561"
			},
			{
				"src": "405",
				"dest": "570"
			},
			{
				"src": "570",
				"dest": "406"
			},
			{
				"src": "347",
				"dest": "571"
			},
			{
				"src": "571",
				"dest": "406"
			},
			{
				"src": "411",
				"dest": "572"
			},
			{
				"src": "572",
				"dest": "345"
			},
			{
				"src": "348",
				"dest": "573"
			},
			{
				"src": "573",
				"dest": "409"
			},
			{
				"src": "344",
				"dest": "574"
			},
			{
				"src": "574",
				"dest": "405"
			},
			{
				"src": "435",
				"dest": "575"
			},
			{
				"src": "575",
				"dest": "436"
			},
			{
				"src": "304",
				"dest": "576"
			},
			{
				"src": "576",
				"dest": "436"
			},
			{
				"src": "441",
				"dest": "577"
			},
			{
				"src": "577",
				"dest": "307"
			},
			{
				"src": "308",
				"dest": "578"
			},
			{
				"src": "578",
				"dest": "439"
			},
			{
				"src": "306",
				"dest": "579"
			},
			{
				"src": "579",
				"dest": "435"
			},
			{
				"src": "465",
				"dest": "580"
			},
			{
				"src": "580",
				"dest": "466"
			},
			{
				"src": "290",
				"dest": "581"
			},
			{
				"src": "581",
				"dest": "466"
			},
			{
				"src": "471",
				"dest": "582"
			},
			{
				"src": "582",
				"dest": "288"
			},
			{
				"src": "291",
				"dest": "583"
			},
			{
				"src": "583",
				"dest": "469"
			},
			{
				"src": "287",
				"dest": "584"
			},
			{
				"src": "584",
				"dest": "465"
			},
			{
				"src": "480",
				"dest": "585"
			},
			{
				"src": "585",
				"dest": "481"
			},
			{
				"src": "285",
				"dest": "586"
			},
			{
				"src": "586",
				"dest": "481"
			},
			{
				"src": "486",
				"dest": "587"
			},
			{
				"src": "587",
				"dest": "288"
			},
			{
				"src": "289",
				"dest": "588"
			},
			{
				"src": "588",
				"dest": "484"
			},
			{
				"src": "287",
				"dest": "589"
			},
			{
				"src": "589",
				"dest": "480"
			},
			{
				"src": "495",
				"dest": "590"
			},
			{
				"src": "590",
				"dest": "496"
			},
			{
				"src": "342",
				"dest": "591"
			},
			{
				"src": "591",
				"dest": "496"
			},
			{
				"src": "501",
				"dest": "592"
			},
			{
				"src": "592",
				"dest": "345"
			},
			{
				"src": "346",
				"dest": "593"
			},
			{
				"src": "593",
				"dest": "499"
			},
			{
				"src": "344",
				"dest": "594"
			},
			{
				"src": "594",
				"dest": "495"
			},
			{
				"src": "510",
				"dest": "595"
			},
			{
				"src": "595",
				"dest": "511"
			},
			{
				"src": "328",
				"dest": "596"
			},
			{
				"src": "596",
				"dest": "511"
			},
			{
				"src": "516",
				"dest": "597"
			},
			{
				"src": "597",
				"dest": "326"
			},
			{
				"src": "329",
				"dest": "598"
			},
			{
				"src": "598",
				"dest": "514"
			},
			{
				"src": "325",
				"dest": "599"
			},
			{
				"src": "599",
				"dest": "510"
			},
			{
				"src": "525",
				"dest": "600"
			},
			{
				"src": "600",
				"dest": "526"
			},
			{
				"src": "309",
				"dest": "601"
			},
			{
				"src": "601",
				"dest": "526"
			},
			{
				"src": "531",
				"dest": "602"
			},
			{
				"src": "602",
				"dest": "307"
			},
			{
				"src": "310",
				"dest": "603"
			},
			{
				"src": "603",
				"dest": "529"
			},
			{
				"src": "306",
				"dest": "604"
			},
			{
				"src": "604",
				"dest": "525"
			},
			{
				"src": "540",
				"dest": "605"
			},
			{
				"src": "605",
				"dest": "541"
			},
			{
				"src": "323",
				"dest": "606"
			},
			{
				"src": "606",
				"dest": "541"
			},
			{
				"src": "546",
				"dest": "607"
			},
			{
				"src": "607",
				"dest": "326"
			},
			{
				"src": "327",
				"dest": "608"
			},
			{
				"src": "608",
				"dest": "544"
			},
			{
				"src": "325",
				"dest": "609"
			},
			{
				"src": "609",
				"dest": "540"
			},
			{
				"src": "147",
				"dest": "610"
			},
			{
				"src": "610",
				"dest": "361"
			},
			{
				"src": "149",
				"dest": "611"
			},
			{
				"src": "611",
				"dest": "360"
			},
			{
				"src": "152",
				"dest": "612"
			},
			{
				"src": "612",
				"dest": "364"
			},
			{
				"src": "366",
				"dest": "613"
			},
			{
				"src": "613",
				"dest": "151"
			},
			{
				"src": "163",
				"dest": "614"
			},
			{
				"src": "614",
				"dest": "349"
			},
			{
				"src": "165",
				"dest": "615"
			},
			{
				"src": "615",
				"dest": "344"
			},
			{
				"src": "168",
				"dest": "616"
			},
			{
				"src": "616",
				"dest": "341"
			},
			{
				"src": "343",
				"dest": "617"
			},
			{
				"src": "617",
				"dest": "167"
			},
			{
				"src": "179",
				"dest": "618"
			},
			{
				"src": "618",
				"dest": "311"
			},
			{
				"src": "181",
				"dest": "619"
			},
			{
				"src": "619",
				"dest": "306"
			},
			{
				"src": "184",
				"dest": "620"
			},
			{
				"src": "620",
				"dest": "303"
			},
			{
				"src": "305",
				"dest": "621"
			},
			{
				"src": "621",
				"dest": "183"
			},
			{
				"src": "229",
				"dest": "622"
			},
			{
				"src": "622",
				"dest": "292"
			},
			{
				"src": "225",
				"dest": "623"
			},
			{
				"src": "623",
				"dest": "287"
			},
			{
				"src": "228",
				"dest": "624"
			},
			{
				"src": "624",
				"dest": "284"
			},
			{
				"src": "286",
				"dest": "625"
			},
			{
				"src": "625",
				"dest": "227"
			},
			{
				"src": "244",
				"dest": "626"
			},
			{
				"src": "626",
				"dest": "216"
			},
			{
				"src": "240",
				"dest": "627"
			},
			{
				"src": "627",
				"dest": "218"
			},
			{
				"src": "243",
				"dest": "628"
			},
			{
				"src": "628",
				"dest": "215"
			},
			{
				"src": "217",
				"dest": "629"
			},
			{
				"src": "629",
				"dest": "242"
			},
			{
				"src": "259",
				"dest": "630"
			},
			{
				"src": "630",
				"dest": "207"
			},
			{
				"src": "255",
				"dest": "631"
			},
			{
				"src": "631",
				"dest": "209"
			},
			{
				"src": "258",
				"dest": "632"
			},
			{
				"src": "632",
				"dest": "206"
			},
			{
				"src": "208",
				"dest": "633"
			},
			{
				"src": "633",
				"dest": "257"
			},
			{
				"src": "274",
				"dest": "634"
			},
			{
				"src": "634",
				"dest": "330"
			},
			{
				"src": "270",
				"dest": "635"
			},
			{
				"src": "635",
				"dest": "325"
			},
			{
				"src": "273",
				"dest": "636"
			},
			{
				"src": "636",
				"dest": "322"
			},
			{
				"src": "324",
				"dest": "637"
			},
			{
				"src": "637",
				"dest": "272"
			},
			{
				"src": "363",
				"dest": "638"
			},
			{
				"src": "638",
				"dest": "376"
			},
			{
				"src": "360",
				"dest": "639"
			},
			{
				"src": "639",
				"dest": "375"
			},
			{
				"src": "362",
				"dest": "640"
			},
			{
				"src": "640",
				"dest": "379"
			},
			{
				"src": "381",
				"dest": "641"
			},
			{
				"src": "641",
				"dest": "365"
			},
			{
				"src": "378",
				"dest": "642"
			},
			{
				"src": "642",
				"dest": "269"
			},
			{
				"src": "375",
				"dest": "643"
			},
			{
				"src": "643",
				"dest": "270"
			},
			{
				"src": "377",
				"dest": "644"
			},
			{
				"src": "644",
				"dest": "275"
			},
			{
				"src": "271",
				"dest": "645"
			},
			{
				"src": "645",
				"dest": "380"
			},
			{
				"src": "393",
				"dest": "646"
			},
			{
				"src": "646",
				"dest": "451"
			},
			{
				"src": "390",
				"dest": "647"
			},
			{
				"src": "647",
				"dest": "450"
			},
			{
				"src": "392",
				"dest": "648"
			},
			{
				"src": "648",
				"dest": "454"
			},
			{
				"src": "456",
				"dest": "649"
			},
			{
				"src": "649",
				"dest": "395"
			},
			{
				"src": "408",
				"dest": "650"
			},
			{
				"src": "650",
				"dest": "224"
			},
			{
				"src": "405",
				"dest": "651"
			},
			{
				"src": "651",
				"dest": "225"
			},
			{
				"src": "407",
				"dest": "652"
			},
			{
				"src": "652",
				"dest": "230"
			},
			{
				"src": "226",
				"dest": "653"
			},
			{
				"src": "653",
				"dest": "410"
			},
			{
				"src": "423",
				"dest": "654"
			},
			{
				"src": "654",
				"dest": "391"
			},
			{
				"src": "420",
				"dest": "655"
			},
			{
				"src": "655",
				"dest": "390"
			},
			{
				"src": "422",
				"dest": "656"
			},
			{
				"src": "656",
				"dest": "394"
			},
			{
				"src": "396",
				"dest": "657"
			},
			{
				"src": "657",
				"dest": "425"
			},
			{
				"src": "438",
				"dest": "658"
			},
			{
				"src": "658",
				"dest": "224"
			},
			{
				"src": "435",
				"dest": "659"
			},
			{
				"src": "659",
				"dest": "225"
			},
			{
				"src": "437",
				"dest": "660"
			},
			{
				"src": "660",
				"dest": "230"
			},
			{
				"src": "226",
				"dest": "661"
			},
			{
				"src": "661",
				"dest": "440"
			},
			{
				"src": "453",
				"dest": "662"
			},
			{
				"src": "662",
				"dest": "239"
			},
			{
				"src": "450",
				"dest": "663"
			},
			{
				"src": "663",
				"dest": "240"
			},
			{
				"src": "452",
				"dest": "664"
			},
			{
				"src": "664",
				"dest": "245"
			},
			{
				"src": "241",
				"dest": "665"
			},
			{
				"src": "665",
				"dest": "455"
			},
			{
				"src": "468",
				"dest": "666"
			},
			{
				"src": "666",
				"dest": "254"
			},
			{
				"src": "465",
				"dest": "667"
			},
			{
				"src": "667",
				"dest": "255"
			},
			{
				"src": "467",
				"dest": "668"
			},
			{
				"src": "668",
				"dest": "260"
			},
			{
				"src": "256",
				"dest": "669"
			},
			{
				"src": "669",
				"dest": "470"
			},
			{
				"src": "483",
				"dest": "670"
			},
			{
				"src": "670",
				"dest": "239"
			},
			{
				"src": "480",
				"dest": "671"
			},
			{
				"src": "671",
				"dest": "240"
			},
			{
				"src": "482",
				"dest": "672"
			},
			{
				"src": "672",
				"dest": "245"
			},
			{
				"src": "241",
				"dest": "673"
			},
			{
				"src": "673",
				"dest": "485"
			},
			{
				"src": "498",
				"dest": "674"
			},
			{
				"src": "674",
				"dest": "421"
			},
			{
				"src": "495",
				"dest": "675"
			},
			{
				"src": "675",
				"dest": "420"
			},
			{
				"src": "497",
				"dest": "676"
			},
			{
				"src": "676",
				"dest": "424"
			},
			{
				"src": "426",
				"dest": "677"
			},
			{
				"src": "677",
				"dest": "500"
			},
			{
				"src": "513",
				"dest": "678"
			},
			{
				"src": "678",
				"dest": "556"
			},
			{
				"src": "510",
				"dest": "679"
			},
			{
				"src": "679",
				"dest": "555"
			},
			{
				"src": "512",
				"dest": "680"
			},
			{
				"src": "680",
				"dest": "559"
			},
			{
				"src": "561",
				"dest": "681"
			},
			{
				"src": "681",
				"dest": "515"
			},
			{
				"src": "528",
				"dest": "682"
			},
			{
				"src": "682",
				"dest": "269"
			},
			{
				"src": "525",
				"dest": "683"
			},
			{
				"src": "683",
				"dest": "270"
			},
			{
				"src": "527",
				"dest": "684"
			},
			{
				"src": "684",
				"dest": "275"
			},
			{
				"src": "271",
				"dest": "685"
			},
			{
				"src": "685",
				"dest": "530"
			},
			{
				"src": "543",
				"dest": "686"
			},
			{
				"src": "686",
				"dest": "254"
			},
			{
				"src": "540",
				"dest": "687"
			},
			{
				"src": "687",
				"dest": "255"
			},
			{
				"src": "542",
				"dest": "688"
			},
			{
				"src": "688",
				"dest": "260"
			},
			{
				"src": "256",
				"dest": "689"
			},
			{
				"src": "689",
				"dest": "545"
			},
			{
				"src": "558",
				"dest": "690"
			},
			{
				"src": "690",
				"dest": "198"
			},
			{
				"src": "555",
				"dest": "691"
			},
			{
				"src": "691",
				"dest": "200"
			},
			{
				"src": "557",
				"dest": "692"
			},
			{
				"src": "692",
				"dest": "197"
			},
			{
				"src": "199",
				"dest": "693"
			},
			{
				"src": "693",
				"dest": "560"
			}
		],
		"metamodels": [
			"/Formalisms/Railway/Railway",
			"/Formalisms/TrainSchedule/TrainSchedule",
			"/Formalisms/ClassicDEVS/ClassicDEVS",
			"/Formalisms/GenericGraph/GenericGraph"
		]
	}
}