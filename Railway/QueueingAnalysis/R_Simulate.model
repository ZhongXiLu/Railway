{
	"csm": {
		"nodes": {
			"0": {
				"typename": {
					"type": "string",
					"value": "LHSIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						289,
						196
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"segments": {
									"type": "string",
									"value": "m0,0 l350,0 l100,250 l-100,250 l-350,0z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"stroke-width": 2,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										1,
										0
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__Transformations__/TransformationRule/TransformationRule/LHS/0.instance"
				},
				"$type": "/Formalisms/__Transformations__/TransformationRule/TransformationRule.defaultIcons/LHSIcon"
			},
			"1": {
				"typename": {
					"type": "string",
					"value": "RHSIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						690,
						196
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"7": {
								"segments": {
									"type": "string",
									"value": "m0,0 l450,0 l0,500 l-450,0 l100,-250z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"stroke-width": 2,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										0,
										0
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/__Transformations__/TransformationRule/TransformationRule/RHS/1.instance"
				},
				"$type": "/Formalisms/__Transformations__/TransformationRule/TransformationRule.defaultIcons/RHSIcon"
			}
		},
		"edges": [],
		"metamodels": [
			"/Formalisms/__Transformations__/TransformationRule/TransformationRule.defaultIcons"
		]
	},
	"asm": {
		"nodes": {
			"0": {
				"Condition": {
					"type": "code",
					"value": "result = True"
				},
				"$type": "/Formalisms/__Transformations__/TransformationRule/TransformationRule/LHS"
			},
			"1": {
				"Action": {
					"type": "code",
					"value": "import os\n\n'''\nGenerate PythonPDevs file\n'''\n\nif not os.path.exists(\"railway_wd\"):\n    os.makedirs(\"railway_wd\")\n\nfileName = \"{}/{}/{}\".format(os.getcwd(), \"railway_wd\", \"railway.py\")\nfile = open(fileName, \"w\")\n\n# Places\nfile.write(\"\"\"\nimport json\nfrom RailwayDEVS.models import *\nfrom pypdevs.simulator import Simulator\nfrom pypdevs.DEVS import AtomicDEVS, CoupledDEVS\n\nclass Railway(CoupledDEVS):\n    def __init__(self):\n\n        CoupledDEVS.__init__(self, \"Railway\")\n\"\"\")\n\ngenerators = []\nsegments = []\ncollectors = []\nfor instance in getAllNodes([\"/Formalisms/ClassicDEVS/ClassicDEVS/DevsInstance\"]):\n    name = getAttr(\"name\", instance)\n    devs_type = getAttr(\"devs_type\", instance)\n    parameter_binding = None\n    if len(getAttr(\"parameter_binding\", instance)) > 0:\n        parameter_binding = getAttr(\"parameter_binding\", instance)[0]\n    model = None\n\n    if devs_type == \"Generator\":\n        generators.append(name)\n        model = \"Generator('{}', {}, {}, {}, {}, {}, '{}', '{}')\".format(name, parameter_binding[\"IAT_min\"], parameter_binding[\"IAT_max\"], parameter_binding[\"a_min\"], parameter_binding[\"a_max\"], parameter_binding[\"schedule\"], parameter_binding[\"start\"], parameter_binding[\"end\"])\n    elif devs_type == \"Collector\":\n        model = \"Collector('{}')\".format(name)\n        collectors.append(name)\n    elif devs_type == \"PollQueue\":\n        model = \"PollQueue('{}')\".format(name)\n    elif devs_type == \"RailwaySegment\":\n        segments.append(name)\n        model = \"RailwaySegment('{}', {})\".format(name, parameter_binding[\"length\"])\n    elif devs_type == \"Split\":\n        segments.append(name)\n        model = \"Split('{}', {})\".format(name, parameter_binding[\"length\"])\n    elif devs_type == \"Crossing\":\n        segments.append(name)\n        model = \"Crossing('{}', {})\".format(name, parameter_binding[\"length\"])\n    elif devs_type == \"Join\":\n        segments.append(name)\n        model = \"Join('{}', {})\".format(name, parameter_binding[\"length\"])\n\n    if model is not None:\n        file.write(\"        self.{} = self.addSubModel({})\\n\".format(name, model))\n\nfor channel in getAllNodes([\"/Formalisms/ClassicDEVS/ClassicDEVS/channel\"]):\n    fromPort = getNeighbors(\"<\", \"*\", channel)[0]\n    toPort = getNeighbors(\">\", \"*\", channel)[0]\n\n    fromInstance = getNeighbors(\"<\", \"*\", getNeighbors(\"<\", \"/Formalisms/ClassicDEVS/ClassicDEVS/ports\", fromPort)[0])[0]\n    toInstance = getNeighbors(\"<\", \"*\", getNeighbors(\"<\", \"/Formalisms/ClassicDEVS/ClassicDEVS/ports\", toPort)[0])[0]\n    file.write(\"        self.connectPorts(self.{}.{}, self.{}.{})\\n\".format(getAttr(\"name\", fromInstance), getAttr(\"name\", fromPort), getAttr(\"name\", toInstance), getAttr(\"name\", toPort)))\n\nterminationTime = 0\nsimulation = getAllNodes([\"/Formalisms/ClassicDEVS/ClassicDEVS/Simulation\"])\nif len(simulation) > 0:\n    terminationTime = getAttr(\"end_condition\", simulation[0])\n\nfile.write(\"\"\"\nsim = Simulator(Railway())\nsim.setTerminationTime({})\nsim.setCustomTracer(\"RailwayDEVS.tracer.tracerRailway\", \"TracerRailway\", [\"railway_wd/RailwayUnity/Assets/Resources/railway_log.txt\"])\nsim.setClassicDEVS()\nsim.simulate()\n\nresults = {{}}\n\"\"\".format(terminationTime))\n\nfor generator in generators:\n    file.write(\"\"\"\ntrains_generated = sim.model.{0}.trains_generated\nresults['{0}'[1:]] = {{}}\nresults['{0}'[1:]][\"trains generated\"] = trains_generated\n    \"\"\".format(generator))\n\nfor segment in segments:\n    file.write(\"\"\"\ntransitTimes = sim.model.{0}.transit_times\naverageTransitTime = float(\"inf\")\nif len(transitTimes) > 0:\n    averageTransitTime = sum(transitTimes)/float(len(transitTimes))\nresults['{0}'[1:]] = {{}}\nresults['{0}'[1:]][\"trains passed\"] = len(transitTimes)\nresults['{0}'[1:]][\"avg transit time\"] = int(averageTransitTime)\nuptime = sim.model.{0}.uptime\nresults['{0}'[1:]][\"throughput\"] = '%.2f' % (uptime/float({1}))\n    \"\"\".format(segment, terminationTime))\n\nfor collector in collectors:\n    file.write(\"\"\"\ntransitTimes = sim.model.{0}.transit_times\naverageTransitTime = float(\"inf\")\nif len(transitTimes) > 0:\n    averageTransitTime = sum(transitTimes)/float(len(transitTimes))\nresults['{0}'[1:]] = {{}}\nresults['{0}'[1:]][\"trains arrived\"] = len(transitTimes)\nresults['{0}'[1:]][\"avg schedule time\"] = int(averageTransitTime)\n    \"\"\".format(collector))\n\nfile.write(\"\"\"\nwith open('railway_wd/railway_results.json', 'w') as outfile:\n    json.dump(results, outfile, indent=4)\n\"\"\")\n\nfile.close()\n\n'''\nRun simulation with PythonPDEVS on the generated DEVS file\n'''\n\nos.system(\"python2.7 railway_wd/railway.py\")\n"
				},
				"$type": "/Formalisms/__Transformations__/TransformationRule/TransformationRule/RHS"
			}
		},
		"edges": [],
		"metamodels": [
			"/Formalisms/__Transformations__/TransformationRule/TransformationRule"
		]
	}
}